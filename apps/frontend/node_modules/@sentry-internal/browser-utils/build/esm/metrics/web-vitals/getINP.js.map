{"version":3,"file":"getINP.js","sources":["../../../../src/metrics/web-vitals/getINP.ts"],"sourcesContent":["/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../types';\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { DEFAULT_DURATION_THRESHOLD, estimateP98LongestInteraction, processInteractionEntry } from './lib/interactions';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { initInteractionCountPolyfill } from './lib/polyfills/interactionCountPolyfill';\nimport { whenActivated } from './lib/whenActivated';\nimport { whenIdle } from './lib/whenIdle';\n\nimport type { INPMetric, MetricRatingThresholds, ReportOpts } from './types';\n\n/** Thresholds for INP. See https://web.dev/articles/inp#what_is_a_good_inp_score */\nexport const INPThresholds: MetricRatingThresholds = [200, 500];\n\n/**\n * Calculates the [INP](https://web.dev/articles/inp) value for the current\n * page and calls the `callback` function once the value is ready, along with\n * the `event` performance entries reported for that interaction. The reported\n * value is a `DOMHighResTimeStamp`.\n *\n * A custom `durationThreshold` configuration option can optionally be passed to\n * control what `event-timing` entries are considered for INP reporting. The\n * default threshold is `40`, which means INP scores of less than 40 are\n * reported as 0. Note that this will not affect your 75th percentile INP value\n * unless that value is also less than 40 (well below the recommended\n * [good](https://web.dev/articles/inp#what_is_a_good_inp_score) threshold).\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called as soon as the value is initially\n * determined as well as any time the value changes throughout the page\n * lifespan.\n *\n * _**Important:** INP should be continually monitored for changes throughout\n * the entire lifespan of a pageâ€”including if the user returns to the page after\n * it's been hidden/backgrounded. However, since browsers often [will not fire\n * additional callbacks once the user has backgrounded a\n * page](https://developer.chrome.com/blog/page-lifecycle-api/#advice-hidden),\n * `callback` is always called when the page's visibility state changes to\n * hidden. As a result, the `callback` function might be called multiple times\n * during the same page load._\n */\nexport const onINP = (onReport: (metric: INPMetric) => void, opts: ReportOpts = {}) => {\n  // Return if the browser doesn't support all APIs needed to measure INP.\n  if (!('PerformanceEventTiming' in WINDOW && 'interactionId' in PerformanceEventTiming.prototype)) {\n    return;\n  }\n\n  whenActivated(() => {\n    // TODO(philipwalton): remove once the polyfill is no longer needed.\n    initInteractionCountPolyfill();\n\n    const metric = initMetric('INP');\n    // eslint-disable-next-line prefer-const\n    let report: ReturnType<typeof bindReporter>;\n\n    const handleEntries = (entries: INPMetric['entries']) => {\n      // Queue the `handleEntries()` callback in the next idle task.\n      // This is needed to increase the chances that all event entries that\n      // occurred between the user interaction and the next paint\n      // have been dispatched. Note: there is currently an experiment\n      // running in Chrome (EventTimingKeypressAndCompositionInteractionId)\n      // 123+ that if rolled out fully may make this no longer necessary.\n      whenIdle(() => {\n        entries.forEach(processInteractionEntry);\n\n        const inp = estimateP98LongestInteraction();\n\n        if (inp && inp.latency !== metric.value) {\n          metric.value = inp.latency;\n          metric.entries = inp.entries;\n          report();\n        }\n      });\n    };\n\n    const po = observe('event', handleEntries, {\n      // Event Timing entries have their durations rounded to the nearest 8ms,\n      // so a duration of 40ms would be any event that spans 2.5 or more frames\n      // at 60Hz. This threshold is chosen to strike a balance between usefulness\n      // and performance. Running this callback for any interaction that spans\n      // just one or two frames is likely not worth the insight that could be\n      // gained.\n      durationThreshold: opts.durationThreshold != null ? opts.durationThreshold : DEFAULT_DURATION_THRESHOLD,\n    });\n\n    report = bindReporter(onReport, metric, INPThresholds, opts.reportAllChanges);\n\n    if (po) {\n      // Also observe entries of type `first-input`. This is useful in cases\n      // where the first interaction is less than the `durationThreshold`.\n      po.observe({ type: 'first-input', buffered: true });\n\n      onHidden(() => {\n        handleEntries(po.takeRecords() as INPMetric['entries']);\n        report(true);\n      });\n    }\n  });\n};\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAcA;AACO,MAAM,aAAa,GAA2B,CAAC,GAAG,EAAE,GAAG;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa,MAAA,KAAA,GAAQ,CAAC,QAAQ,EAA+B,IAAI,GAAe,EAAE,KAAK;AACvF;AACA,EAAE,IAAI,EAAE,4BAA4B,MAAA,IAAU,eAAA,IAAmB,sBAAsB,CAAC,SAAS,CAAC,EAAE;AACpG,IAAI;AACJ;;AAEA,EAAE,aAAa,CAAC,MAAM;AACtB;AACA,IAAI,4BAA4B,EAAE;;AAElC,IAAI,MAAM,MAAO,GAAE,UAAU,CAAC,KAAK,CAAC;AACpC;AACA,IAAI,IAAI,MAAM;;AAEd,IAAI,MAAM,aAAc,GAAE,CAAC,OAAO,KAA2B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,QAAQ,CAAC,MAAM;AACrB,QAAQ,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC;;AAEhD,QAAQ,MAAM,GAAA,GAAM,6BAA6B,EAAE;;AAEnD,QAAQ,IAAI,GAAA,IAAO,GAAG,CAAC,OAAA,KAAY,MAAM,CAAC,KAAK,EAAE;AACjD,UAAU,MAAM,CAAC,KAAA,GAAQ,GAAG,CAAC,OAAO;AACpC,UAAU,MAAM,CAAC,OAAA,GAAU,GAAG,CAAC,OAAO;AACtC,UAAU,MAAM,EAAE;AAClB;AACA,OAAO,CAAC;AACR,KAAK;;AAEL,IAAI,MAAM,KAAK,OAAO,CAAC,OAAO,EAAE,aAAa,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,iBAAiB,EAAE,IAAI,CAAC,iBAAkB,IAAG,IAAK,GAAE,IAAI,CAAC,iBAAkB,GAAE,0BAA0B;AAC7G,KAAK,CAAC;;AAEN,IAAI,MAAO,GAAE,YAAY,CAAC,QAAQ,EAAE,MAAM,EAAE,aAAa,EAAE,IAAI,CAAC,gBAAgB,CAAC;;AAEjF,IAAI,IAAI,EAAE,EAAE;AACZ;AACA;AACA,MAAM,EAAE,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,QAAQ,EAAE,IAAA,EAAM,CAAC;;AAEzD,MAAM,QAAQ,CAAC,MAAM;AACrB,QAAQ,aAAa,CAAC,EAAE,CAAC,WAAW,IAA2B;AAC/D,QAAQ,MAAM,CAAC,IAAI,CAAC;AACpB,OAAO,CAAC;AACR;AACA,GAAG,CAAC;AACJ;;;;"}