{"version":3,"sources":["../../../../../packages/vite/src/utils/version-utils.ts"],"sourcesContent":["import type { Tree } from 'nx/src/generators/tree';\nimport {\n  vitestVersion,\n  vitestV1Version,\n  vitestCoverageV8Version,\n  vitestV1CoverageV8Version,\n  vitestCoverageIstanbulVersion,\n  vitestV1CoverageIstanbulVersion,\n} from './versions';\nimport { clean, coerce, major } from 'semver';\nimport { readJson, createProjectGraphAsync } from '@nx/devkit';\n\ntype VitestDependenciesVersions = {\n  vitest: string;\n  vitestCoverageV8: string;\n  vitestCoverageIstanbul: string;\n};\n\nexport async function getVitestDependenciesVersionsToInstall(\n  tree: Tree\n): Promise<VitestDependenciesVersions> {\n  if (await isVitestV1(tree)) {\n    return {\n      vitest: vitestV1Version,\n      vitestCoverageV8: vitestV1CoverageV8Version,\n      vitestCoverageIstanbul: vitestV1CoverageIstanbulVersion,\n    };\n  } else {\n    return {\n      vitest: vitestVersion,\n      vitestCoverageV8: vitestCoverageV8Version,\n      vitestCoverageIstanbul: vitestCoverageIstanbulVersion,\n    };\n  }\n}\n\nexport async function isVitestV1(tree: Tree) {\n  let installedVitestVersion = await getInstalledVitestVersionFromGraph();\n  if (!installedVitestVersion) {\n    installedVitestVersion = getInstalledVitestVersion(tree);\n  }\n  return major(installedVitestVersion) === 1;\n}\n\nexport function getInstalledVitestVersion(tree: Tree): string {\n  const pkgJson = readJson(tree, 'package.json');\n  const installedVitestVersion =\n    pkgJson.dependencies && pkgJson.dependencies['vitest'];\n\n  if (\n    !installedVitestVersion ||\n    installedVitestVersion === 'latest' ||\n    installedVitestVersion === 'beta'\n  ) {\n    return clean(vitestVersion) ?? coerce(vitestVersion).version;\n  }\n\n  return (\n    clean(installedVitestVersion) ?? coerce(installedVitestVersion).version\n  );\n}\n\nexport async function getInstalledVitestVersionFromGraph() {\n  const graph = await createProjectGraphAsync();\n  const vitestDep = graph.externalNodes?.['npm:vitest'];\n  if (!vitestDep) {\n    return undefined;\n  }\n  return (\n    clean(vitestDep.data.version) ?? coerce(vitestDep.data.version).version\n  );\n}\n"],"names":["getInstalledVitestVersion","getInstalledVitestVersionFromGraph","getVitestDependenciesVersionsToInstall","isVitestV1","tree","vitest","vitestV1Version","vitestCoverageV8","vitestV1CoverageV8Version","vitestCoverageIstanbul","vitestV1CoverageIstanbulVersion","vitestVersion","vitestCoverageV8Version","vitestCoverageIstanbulVersion","installedVitestVersion","major","pkgJson","readJson","dependencies","clean","coerce","version","graph","createProjectGraphAsync","vitestDep","externalNodes","undefined","data"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;IA4CgBA,yBAAyB;eAAzBA;;IAkBMC,kCAAkC;eAAlCA;;IA5CAC,sCAAsC;eAAtCA;;IAkBAC,UAAU;eAAVA;;;0BA5Bf;wBAC8B;wBACa;AAQ3C,eAAeD,uCACpBE,IAAU;IAEV,IAAI,MAAMD,WAAWC,OAAO;QAC1B,OAAO;YACLC,QAAQC,yBAAe;YACvBC,kBAAkBC,mCAAyB;YAC3CC,wBAAwBC,yCAA+B;QACzD;IACF,OAAO;QACL,OAAO;YACLL,QAAQM,uBAAa;YACrBJ,kBAAkBK,iCAAuB;YACzCH,wBAAwBI,uCAA6B;QACvD;IACF;AACF;AAEO,eAAeV,WAAWC,IAAU;IACzC,IAAIU,yBAAyB,MAAMb;IACnC,IAAI,CAACa,wBAAwB;QAC3BA,yBAAyBd,0BAA0BI;IACrD;IACA,OAAOW,IAAAA,aAAK,EAACD,4BAA4B;AAC3C;AAEO,SAASd,0BAA0BI,IAAU;IAClD,MAAMY,UAAUC,IAAAA,gBAAQ,EAACb,MAAM;IAC/B,MAAMU,yBACJE,QAAQE,YAAY,IAAIF,QAAQE,YAAY,CAAC,SAAS;IAExD,IACE,CAACJ,0BACDA,2BAA2B,YAC3BA,2BAA2B,QAC3B;YACOK;QAAP,OAAOA,CAAAA,SAAAA,IAAAA,aAAK,EAACR,uBAAa,aAAnBQ,SAAwBC,IAAAA,cAAM,EAACT,uBAAa,EAAEU,OAAO;IAC9D;QAGEF;IADF,OACEA,CAAAA,UAAAA,IAAAA,aAAK,EAACL,mCAANK,UAAiCC,IAAAA,cAAM,EAACN,wBAAwBO,OAAO;AAE3E;AAEO,eAAepB;QAEFqB;IADlB,MAAMA,QAAQ,MAAMC,IAAAA,+BAAuB;IAC3C,MAAMC,aAAYF,uBAAAA,MAAMG,aAAa,qBAAnBH,oBAAqB,CAAC,aAAa;IACrD,IAAI,CAACE,WAAW;QACd,OAAOE;IACT;QAEEP;IADF,OACEA,CAAAA,SAAAA,IAAAA,aAAK,EAACK,UAAUG,IAAI,CAACN,OAAO,aAA5BF,SAAiCC,IAAAA,cAAM,EAACI,UAAUG,IAAI,CAACN,OAAO,EAAEA,OAAO;AAE3E"}