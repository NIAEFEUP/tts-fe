{"version":3,"sources":["../../../../../packages/vite/src/utils/options-utils.ts"],"sourcesContent":["import {\n  ExecutorContext,\n  joinPathFragments,\n  logger,\n  parseTargetString,\n  readTargetOptions,\n} from '@nx/devkit';\nimport { existsSync } from 'fs';\nimport { ViteDevServerExecutorOptions } from '../executors/dev-server/schema';\nimport { loadViteDynamicImport } from './executor-utils';\n\n/**\n * Returns the path to the vite config file or undefined when not found.\n */\nexport function normalizeViteConfigFilePath(\n  contextRoot: string,\n  projectRoot: string,\n  configFile?: string\n): string | undefined {\n  if (configFile) {\n    const normalized = joinPathFragments(contextRoot, configFile);\n    if (!existsSync(normalized)) {\n      throw new Error(\n        `Could not find vite config at provided path \"${normalized}\".`\n      );\n    }\n    return normalized;\n  }\n\n  const allowsExt = ['js', 'mjs', 'ts', 'cjs', 'mts', 'cts'];\n\n  for (const ext of allowsExt) {\n    if (\n      existsSync(\n        joinPathFragments(contextRoot, projectRoot, `vite.config.${ext}`)\n      )\n    ) {\n      return joinPathFragments(contextRoot, projectRoot, `vite.config.${ext}`);\n    } else if (\n      existsSync(\n        joinPathFragments(contextRoot, projectRoot, `vitest.config.${ext}`)\n      )\n    ) {\n      return joinPathFragments(\n        contextRoot,\n        projectRoot,\n        `vitest.config.${ext}`\n      );\n    }\n  }\n}\n\nexport function getProjectTsConfigPath(\n  projectRoot: string\n): string | undefined {\n  return existsSync(joinPathFragments(projectRoot, 'tsconfig.app.json'))\n    ? joinPathFragments(projectRoot, 'tsconfig.app.json')\n    : existsSync(joinPathFragments(projectRoot, 'tsconfig.lib.json'))\n    ? joinPathFragments(projectRoot, 'tsconfig.lib.json')\n    : existsSync(joinPathFragments(projectRoot, 'tsconfig.json'))\n    ? joinPathFragments(projectRoot, 'tsconfig.json')\n    : undefined;\n}\n\n/**\n * Returns the path to the proxy configuration file or undefined when not found.\n */\nexport function getViteServerProxyConfigPath(\n  nxProxyConfig: string | undefined,\n  context: ExecutorContext\n): string | undefined {\n  if (nxProxyConfig) {\n    const projectRoot =\n      context.projectsConfigurations.projects[context.projectName].root;\n\n    const proxyConfigPath = nxProxyConfig\n      ? joinPathFragments(context.root, nxProxyConfig)\n      : joinPathFragments(projectRoot, 'proxy.conf.json');\n\n    if (existsSync(proxyConfigPath)) {\n      return proxyConfigPath;\n    }\n  }\n}\n\n/**\n * Builds the options for the vite dev server.\n */\nexport async function getViteServerOptions(\n  options: ViteDevServerExecutorOptions,\n  context: ExecutorContext\n): Promise<Record<string, unknown>> {\n  // returns vite ServerOptions\n  // Allows ESM to be required in CJS modules. Vite will be published as ESM in the future.\n  const { searchForWorkspaceRoot } = await loadViteDynamicImport();\n  const projectRoot =\n    context.projectsConfigurations.projects[context.projectName].root;\n  const serverOptions: Record<string, unknown> = {\n    fs: {\n      allow: [\n        searchForWorkspaceRoot(joinPathFragments(projectRoot)),\n        joinPathFragments(context.root, 'node_modules/vite'),\n      ],\n    },\n  };\n\n  const proxyConfigPath = getViteServerProxyConfigPath(\n    options.proxyConfig,\n    context\n  );\n  if (proxyConfigPath) {\n    logger.info(`Loading proxy configuration from: ${proxyConfigPath}`);\n    serverOptions.proxy = require(proxyConfigPath);\n  }\n\n  return serverOptions;\n}\n\nexport function getProxyConfig(\n  context: ExecutorContext,\n  proxyConfig?: string\n): Record<string, string | unknown> | undefined {\n  const proxyConfigPath = getViteServerProxyConfigPath(proxyConfig, context);\n  if (proxyConfigPath) {\n    logger.info(`Loading proxy configuration from: ${proxyConfigPath}`);\n    return require(proxyConfigPath);\n  }\n  return;\n}\n\nexport function getNxTargetOptions(target: string, context: ExecutorContext) {\n  const targetObj = parseTargetString(target, context);\n  return readTargetOptions(targetObj, context);\n}\n"],"names":["getNxTargetOptions","getProjectTsConfigPath","getProxyConfig","getViteServerOptions","getViteServerProxyConfigPath","normalizeViteConfigFilePath","contextRoot","projectRoot","configFile","normalized","joinPathFragments","existsSync","Error","allowsExt","ext","undefined","nxProxyConfig","context","projectsConfigurations","projects","projectName","root","proxyConfigPath","options","searchForWorkspaceRoot","loadViteDynamicImport","serverOptions","fs","allow","proxyConfig","logger","info","proxy","require","target","targetObj","parseTargetString","readTargetOptions"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}