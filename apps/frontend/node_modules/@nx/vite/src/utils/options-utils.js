"use strict";
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getNxTargetOptions: function() {
        return getNxTargetOptions;
    },
    getProjectTsConfigPath: function() {
        return getProjectTsConfigPath;
    },
    getProxyConfig: function() {
        return getProxyConfig;
    },
    getViteServerOptions: function() {
        return getViteServerOptions;
    },
    getViteServerProxyConfigPath: function() {
        return getViteServerProxyConfigPath;
    },
    normalizeViteConfigFilePath: function() {
        return normalizeViteConfigFilePath;
    }
});
const _devkit = require("@nx/devkit");
const _fs = require("fs");
const _executorutils = require("./executor-utils");
function normalizeViteConfigFilePath(contextRoot, projectRoot, configFile) {
    if (configFile) {
        const normalized = (0, _devkit.joinPathFragments)(contextRoot, configFile);
        if (!(0, _fs.existsSync)(normalized)) {
            throw new Error(`Could not find vite config at provided path "${normalized}".`);
        }
        return normalized;
    }
    const allowsExt = [
        'js',
        'mjs',
        'ts',
        'cjs',
        'mts',
        'cts'
    ];
    for (const ext of allowsExt){
        if ((0, _fs.existsSync)((0, _devkit.joinPathFragments)(contextRoot, projectRoot, `vite.config.${ext}`))) {
            return (0, _devkit.joinPathFragments)(contextRoot, projectRoot, `vite.config.${ext}`);
        } else if ((0, _fs.existsSync)((0, _devkit.joinPathFragments)(contextRoot, projectRoot, `vitest.config.${ext}`))) {
            return (0, _devkit.joinPathFragments)(contextRoot, projectRoot, `vitest.config.${ext}`);
        }
    }
}
function getProjectTsConfigPath(projectRoot) {
    return (0, _fs.existsSync)((0, _devkit.joinPathFragments)(projectRoot, 'tsconfig.app.json')) ? (0, _devkit.joinPathFragments)(projectRoot, 'tsconfig.app.json') : (0, _fs.existsSync)((0, _devkit.joinPathFragments)(projectRoot, 'tsconfig.lib.json')) ? (0, _devkit.joinPathFragments)(projectRoot, 'tsconfig.lib.json') : (0, _fs.existsSync)((0, _devkit.joinPathFragments)(projectRoot, 'tsconfig.json')) ? (0, _devkit.joinPathFragments)(projectRoot, 'tsconfig.json') : undefined;
}
function getViteServerProxyConfigPath(nxProxyConfig, context) {
    if (nxProxyConfig) {
        const projectRoot = context.projectsConfigurations.projects[context.projectName].root;
        const proxyConfigPath = nxProxyConfig ? (0, _devkit.joinPathFragments)(context.root, nxProxyConfig) : (0, _devkit.joinPathFragments)(projectRoot, 'proxy.conf.json');
        if ((0, _fs.existsSync)(proxyConfigPath)) {
            return proxyConfigPath;
        }
    }
}
async function getViteServerOptions(options, context) {
    // returns vite ServerOptions
    // Allows ESM to be required in CJS modules. Vite will be published as ESM in the future.
    const { searchForWorkspaceRoot } = await (0, _executorutils.loadViteDynamicImport)();
    const projectRoot = context.projectsConfigurations.projects[context.projectName].root;
    const serverOptions = {
        fs: {
            allow: [
                searchForWorkspaceRoot((0, _devkit.joinPathFragments)(projectRoot)),
                (0, _devkit.joinPathFragments)(context.root, 'node_modules/vite')
            ]
        }
    };
    const proxyConfigPath = getViteServerProxyConfigPath(options.proxyConfig, context);
    if (proxyConfigPath) {
        _devkit.logger.info(`Loading proxy configuration from: ${proxyConfigPath}`);
        serverOptions.proxy = require(proxyConfigPath);
    }
    return serverOptions;
}
function getProxyConfig(context, proxyConfig) {
    const proxyConfigPath = getViteServerProxyConfigPath(proxyConfig, context);
    if (proxyConfigPath) {
        _devkit.logger.info(`Loading proxy configuration from: ${proxyConfigPath}`);
        return require(proxyConfigPath);
    }
    return;
}
function getNxTargetOptions(target, context) {
    const targetObj = (0, _devkit.parseTargetString)(target, context);
    return (0, _devkit.readTargetOptions)(targetObj, context);
}

//# sourceMappingURL=options-utils.js.map