"use strict";
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getInstalledVitestVersion: function() {
        return getInstalledVitestVersion;
    },
    getInstalledVitestVersionFromGraph: function() {
        return getInstalledVitestVersionFromGraph;
    },
    getVitestDependenciesVersionsToInstall: function() {
        return getVitestDependenciesVersionsToInstall;
    },
    isVitestV1: function() {
        return isVitestV1;
    }
});
const _versions = require("./versions");
const _semver = require("semver");
const _devkit = require("@nx/devkit");
async function getVitestDependenciesVersionsToInstall(tree) {
    if (await isVitestV1(tree)) {
        return {
            vitest: _versions.vitestV1Version,
            vitestCoverageV8: _versions.vitestV1CoverageV8Version,
            vitestCoverageIstanbul: _versions.vitestV1CoverageIstanbulVersion
        };
    } else {
        return {
            vitest: _versions.vitestVersion,
            vitestCoverageV8: _versions.vitestCoverageV8Version,
            vitestCoverageIstanbul: _versions.vitestCoverageIstanbulVersion
        };
    }
}
async function isVitestV1(tree) {
    let installedVitestVersion = await getInstalledVitestVersionFromGraph();
    if (!installedVitestVersion) {
        installedVitestVersion = getInstalledVitestVersion(tree);
    }
    return (0, _semver.major)(installedVitestVersion) === 1;
}
function getInstalledVitestVersion(tree) {
    const pkgJson = (0, _devkit.readJson)(tree, 'package.json');
    const installedVitestVersion = pkgJson.dependencies && pkgJson.dependencies['vitest'];
    if (!installedVitestVersion || installedVitestVersion === 'latest' || installedVitestVersion === 'beta') {
        var _clean;
        return (_clean = (0, _semver.clean)(_versions.vitestVersion)) != null ? _clean : (0, _semver.coerce)(_versions.vitestVersion).version;
    }
    var _clean1;
    return (_clean1 = (0, _semver.clean)(installedVitestVersion)) != null ? _clean1 : (0, _semver.coerce)(installedVitestVersion).version;
}
async function getInstalledVitestVersionFromGraph() {
    var _graph_externalNodes;
    const graph = await (0, _devkit.createProjectGraphAsync)();
    const vitestDep = (_graph_externalNodes = graph.externalNodes) == null ? void 0 : _graph_externalNodes['npm:vitest'];
    if (!vitestDep) {
        return undefined;
    }
    var _clean;
    return (_clean = (0, _semver.clean)(vitestDep.data.version)) != null ? _clean : (0, _semver.coerce)(vitestDep.data.version).version;
}

//# sourceMappingURL=version-utils.js.map