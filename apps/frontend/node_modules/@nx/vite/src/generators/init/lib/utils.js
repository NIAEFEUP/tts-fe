"use strict";
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    checkDependenciesInstalled: function() {
        return checkDependenciesInstalled;
    },
    createVitestConfig: function() {
        return createVitestConfig;
    },
    moveToDevDependencies: function() {
        return moveToDevDependencies;
    }
});
const _devkit = require("@nx/devkit");
const _versions = require("../../../utils/versions");
const _versionutils = require("../../../utils/version-utils");
async function checkDependenciesInstalled(host, schema) {
    const { vitest } = await (0, _versionutils.getVitestDependenciesVersionsToInstall)(host);
    return (0, _devkit.addDependenciesToPackageJson)(host, {}, {
        '@nx/vite': _versions.nxVersion,
        '@nx/web': _versions.nxVersion,
        vite: schema.useViteV5 ? _versions.viteV5Version : _versions.viteVersion,
        vitest: vitest,
        '@vitest/ui': vitest,
        jiti: _versions.jitiVersion
    }, undefined, schema.keepExistingVersions);
}
function moveToDevDependencies(tree) {
    let wasUpdated = false;
    (0, _devkit.updateJson)(tree, 'package.json', (packageJson)=>{
        packageJson.dependencies = packageJson.dependencies || {};
        packageJson.devDependencies = packageJson.devDependencies || {};
        if (packageJson.dependencies['@nx/vite']) {
            packageJson.devDependencies['@nx/vite'] = packageJson.dependencies['@nx/vite'];
            delete packageJson.dependencies['@nx/vite'];
            wasUpdated = true;
        }
        return packageJson;
    });
    return wasUpdated ? ()=>(0, _devkit.installPackagesTask)(tree) : ()=>{};
}
function createVitestConfig(tree) {
    var _nxJson_namedInputs;
    const nxJson = (0, _devkit.readNxJson)(tree);
    const productionFileSet = (_nxJson_namedInputs = nxJson.namedInputs) == null ? void 0 : _nxJson_namedInputs.production;
    if (productionFileSet) {
        productionFileSet.push('!{projectRoot}/**/?(*.)+(spec|test).[jt]s?(x)?(.snap)', '!{projectRoot}/tsconfig.spec.json');
        nxJson.namedInputs.production = Array.from(new Set(productionFileSet));
    }
    (0, _devkit.updateNxJson)(tree, nxJson);
}

//# sourceMappingURL=utils.js.map