{"version":3,"sources":["../../../../../../../packages/vite/src/generators/init/lib/utils.ts"],"sourcesContent":["import {\n  addDependenciesToPackageJson,\n  installPackagesTask,\n  readNxJson,\n  Tree,\n  updateJson,\n  updateNxJson,\n} from '@nx/devkit';\nimport {\n  jitiVersion,\n  nxVersion,\n  viteV5Version,\n  viteVersion,\n} from '../../../utils/versions';\nimport { InitGeneratorSchema } from '../schema';\nimport { getVitestDependenciesVersionsToInstall } from '../../../utils/version-utils';\n\nexport async function checkDependenciesInstalled(\n  host: Tree,\n  schema: InitGeneratorSchema\n) {\n  const { vitest } = await getVitestDependenciesVersionsToInstall(host);\n  return addDependenciesToPackageJson(\n    host,\n    {},\n    {\n      '@nx/vite': nxVersion,\n      '@nx/web': nxVersion,\n      vite: schema.useViteV5 ? viteV5Version : viteVersion,\n      vitest: vitest,\n      '@vitest/ui': vitest,\n      jiti: jitiVersion,\n    },\n    undefined,\n    schema.keepExistingVersions\n  );\n}\n\nexport function moveToDevDependencies(tree: Tree) {\n  let wasUpdated = false;\n  updateJson(tree, 'package.json', (packageJson) => {\n    packageJson.dependencies = packageJson.dependencies || {};\n    packageJson.devDependencies = packageJson.devDependencies || {};\n\n    if (packageJson.dependencies['@nx/vite']) {\n      packageJson.devDependencies['@nx/vite'] =\n        packageJson.dependencies['@nx/vite'];\n      delete packageJson.dependencies['@nx/vite'];\n      wasUpdated = true;\n    }\n    return packageJson;\n  });\n\n  return wasUpdated ? () => installPackagesTask(tree) : () => {};\n}\n\nexport function createVitestConfig(tree: Tree) {\n  const nxJson = readNxJson(tree);\n\n  const productionFileSet = nxJson.namedInputs?.production;\n  if (productionFileSet) {\n    productionFileSet.push(\n      '!{projectRoot}/**/?(*.)+(spec|test).[jt]s?(x)?(.snap)',\n      '!{projectRoot}/tsconfig.spec.json'\n    );\n\n    nxJson.namedInputs.production = Array.from(new Set(productionFileSet));\n  }\n\n  updateNxJson(tree, nxJson);\n}\n"],"names":["checkDependenciesInstalled","createVitestConfig","moveToDevDependencies","host","schema","vitest","getVitestDependenciesVersionsToInstall","addDependenciesToPackageJson","nxVersion","vite","useViteV5","viteV5Version","viteVersion","jiti","jitiVersion","undefined","keepExistingVersions","tree","wasUpdated","updateJson","packageJson","dependencies","devDependencies","installPackagesTask","nxJson","readNxJson","productionFileSet","namedInputs","production","push","Array","from","Set","updateNxJson"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;IAiBsBA,0BAA0B;eAA1BA;;IAuCNC,kBAAkB;eAAlBA;;IAlBAC,qBAAqB;eAArBA;;;wBA/BT;0BAMA;8BAEgD;AAEhD,eAAeF,2BACpBG,IAAU,EACVC,MAA2B;IAE3B,MAAM,EAAEC,MAAM,EAAE,GAAG,MAAMC,IAAAA,oDAAsC,EAACH;IAChE,OAAOI,IAAAA,oCAA4B,EACjCJ,MACA,CAAC,GACD;QACE,YAAYK,mBAAS;QACrB,WAAWA,mBAAS;QACpBC,MAAML,OAAOM,SAAS,GAAGC,uBAAa,GAAGC,qBAAW;QACpDP,QAAQA;QACR,cAAcA;QACdQ,MAAMC,qBAAW;IACnB,GACAC,WACAX,OAAOY,oBAAoB;AAE/B;AAEO,SAASd,sBAAsBe,IAAU;IAC9C,IAAIC,aAAa;IACjBC,IAAAA,kBAAU,EAACF,MAAM,gBAAgB,CAACG;QAChCA,YAAYC,YAAY,GAAGD,YAAYC,YAAY,IAAI,CAAC;QACxDD,YAAYE,eAAe,GAAGF,YAAYE,eAAe,IAAI,CAAC;QAE9D,IAAIF,YAAYC,YAAY,CAAC,WAAW,EAAE;YACxCD,YAAYE,eAAe,CAAC,WAAW,GACrCF,YAAYC,YAAY,CAAC,WAAW;YACtC,OAAOD,YAAYC,YAAY,CAAC,WAAW;YAC3CH,aAAa;QACf;QACA,OAAOE;IACT;IAEA,OAAOF,aAAa,IAAMK,IAAAA,2BAAmB,EAACN,QAAQ,KAAO;AAC/D;AAEO,SAAShB,mBAAmBgB,IAAU;QAGjBO;IAF1B,MAAMA,SAASC,IAAAA,kBAAU,EAACR;IAE1B,MAAMS,qBAAoBF,sBAAAA,OAAOG,WAAW,qBAAlBH,oBAAoBI,UAAU;IACxD,IAAIF,mBAAmB;QACrBA,kBAAkBG,IAAI,CACpB,yDACA;QAGFL,OAAOG,WAAW,CAACC,UAAU,GAAGE,MAAMC,IAAI,CAAC,IAAIC,IAAIN;IACrD;IAEAO,IAAAA,oBAAY,EAAChB,MAAMO;AACrB"}