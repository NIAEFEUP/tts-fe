"use strict";
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    initGenerator: function() {
        return initGenerator;
    },
    initGeneratorInternal: function() {
        return initGeneratorInternal;
    },
    updateNxJsonSettings: function() {
        return updateNxJsonSettings;
    }
});
const _extends = require("@swc/helpers/_/_extends");
const _devkit = require("@nx/devkit");
const _addplugin = require("@nx/devkit/src/utils/add-plugin");
const _setuppathsplugin = require("../setup-paths-plugin/setup-paths-plugin");
const _plugin = require("../../plugins/plugin");
const _utils = require("./lib/utils");
const _ignorevitetempfiles = require("../../utils/ignore-vite-temp-files");
function updateNxJsonSettings(tree) {
    var _nxJson_namedInputs, _nxJson_plugins;
    const nxJson = (0, _devkit.readNxJson)(tree);
    const productionFileSet = (_nxJson_namedInputs = nxJson.namedInputs) == null ? void 0 : _nxJson_namedInputs.production;
    if (productionFileSet) {
        productionFileSet.push('!{projectRoot}/**/?(*.)+(spec|test).[jt]s?(x)?(.snap)', '!{projectRoot}/tsconfig.spec.json', '!{projectRoot}/src/test-setup.[jt]s');
        nxJson.namedInputs.production = Array.from(new Set(productionFileSet));
    }
    const hasPlugin = (_nxJson_plugins = nxJson.plugins) == null ? void 0 : _nxJson_plugins.some((p)=>typeof p === 'string' ? p === '@nx/vite/plugin' : p.plugin === '@nx/vite/plugin');
    if (!hasPlugin) {
        var _nxJson, _nxJson_targetDefaults, _nxvitetest, _nxJson_targetDefaults_nxvitetest, _nxJson_targetDefaults_nxvitetest1;
        var _targetDefaults;
        (_targetDefaults = (_nxJson = nxJson).targetDefaults) != null ? _targetDefaults : _nxJson.targetDefaults = {};
        var _;
        (_ = (_nxJson_targetDefaults = nxJson.targetDefaults)[_nxvitetest = '@nx/vite:test']) != null ? _ : _nxJson_targetDefaults[_nxvitetest] = {};
        var _cache;
        (_cache = (_nxJson_targetDefaults_nxvitetest = nxJson.targetDefaults['@nx/vite:test']).cache) != null ? _cache : _nxJson_targetDefaults_nxvitetest.cache = true;
        var _inputs;
        (_inputs = (_nxJson_targetDefaults_nxvitetest1 = nxJson.targetDefaults['@nx/vite:test']).inputs) != null ? _inputs : _nxJson_targetDefaults_nxvitetest1.inputs = [
            'default',
            productionFileSet ? '^production' : '^default'
        ];
    }
    (0, _devkit.updateNxJson)(tree, nxJson);
}
function initGenerator(tree, schema) {
    return initGeneratorInternal(tree, _extends._({
        addPlugin: false
    }, schema));
}
async function initGeneratorInternal(tree, schema) {
    var _schema;
    const nxJson = (0, _devkit.readNxJson)(tree);
    const addPluginDefault = process.env.NX_ADD_PLUGINS !== 'false' && nxJson.useInferencePlugins !== false;
    var _addPlugin;
    (_addPlugin = (_schema = schema).addPlugin) != null ? _addPlugin : _schema.addPlugin = addPluginDefault;
    if (schema.addPlugin) {
        await (0, _addplugin.addPlugin)(tree, await (0, _devkit.createProjectGraphAsync)(), '@nx/vite/plugin', _plugin.createNodesV2, {
            buildTargetName: [
                'build',
                'vite:build',
                'vite-build'
            ],
            testTargetName: [
                'test',
                'vite:test',
                'vite-test'
            ],
            serveTargetName: [
                'serve',
                'vite:serve',
                'vite-serve'
            ],
            devTargetName: [
                'dev',
                'vite:dev',
                'vite-dev'
            ],
            previewTargetName: [
                'preview',
                'vite:preview',
                'vite-preview'
            ],
            serveStaticTargetName: [
                'serve-static',
                'vite:serve-static',
                'vite-serve-static'
            ],
            typecheckTargetName: [
                'typecheck',
                'vite:typecheck',
                'vite-typecheck'
            ],
            buildDepsTargetName: [
                'build-deps',
                'vite:build-deps',
                'vite-build-deps'
            ],
            watchDepsTargetName: [
                'watch-deps',
                'vite:watch-deps',
                'vite-watch-deps'
            ]
        }, schema.updatePackageScripts);
    }
    updateNxJsonSettings(tree);
    await (0, _ignorevitetempfiles.ignoreViteTempFiles)(tree, schema.projectRoot);
    if (schema.setupPathsPlugin) {
        await (0, _setuppathsplugin.setupPathsPlugin)(tree, {
            skipFormat: true
        });
    }
    const tasks = [];
    if (!schema.skipPackageJson) {
        tasks.push((0, _utils.moveToDevDependencies)(tree));
        tasks.push(await (0, _utils.checkDependenciesInstalled)(tree, schema));
    }
    if (!schema.skipFormat) {
        await (0, _devkit.formatFiles)(tree);
    }
    return (0, _devkit.runTasksInSerial)(...tasks);
}
const _default = initGenerator;

//# sourceMappingURL=init.js.map