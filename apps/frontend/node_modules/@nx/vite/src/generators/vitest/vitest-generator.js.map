{"version":3,"sources":["../../../../../../packages/vite/src/generators/vitest/vitest-generator.ts"],"sourcesContent":["import {\n  addDependenciesToPackageJson,\n  formatFiles,\n  generateFiles,\n  GeneratorCallback,\n  joinPathFragments,\n  logger,\n  offsetFromRoot,\n  ProjectType,\n  readJson,\n  readNxJson,\n  readProjectConfiguration,\n  runTasksInSerial,\n  Tree,\n  updateJson,\n  updateNxJson,\n} from '@nx/devkit';\nimport { initGenerator as jsInitGenerator } from '@nx/js';\nimport {\n  getProjectType,\n  isUsingTsSolutionSetup,\n} from '@nx/js/src/utils/typescript/ts-solution-setup';\nimport { typesNodeVersion } from '@nx/js/src/utils/versions';\nimport { join } from 'path';\nimport { ensureDependencies } from '../../utils/ensure-dependencies';\nimport {\n  addOrChangeTestTarget,\n  createOrEditViteConfig,\n} from '../../utils/generator-utils';\nimport initGenerator from '../init/init';\nimport { VitestGeneratorSchema } from './schema';\nimport { detectUiFramework } from '../../utils/detect-ui-framework';\nimport { getVitestDependenciesVersionsToInstall } from '../../utils/version-utils';\nimport { coerce, major } from 'semver';\n\n/**\n * @param hasPlugin some frameworks (e.g. Nuxt) provide their own plugin. Their generators handle the plugin detection.\n */\nexport function vitestGenerator(\n  tree: Tree,\n  schema: VitestGeneratorSchema,\n  hasPlugin = false\n) {\n  return vitestGeneratorInternal(\n    tree,\n    { addPlugin: false, ...schema },\n    hasPlugin\n  );\n}\n\nexport async function vitestGeneratorInternal(\n  tree: Tree,\n  schema: VitestGeneratorSchema,\n  hasPlugin = false\n) {\n  // Setting default to jsdom since it is the most common use case (React, Web).\n  // The @nx/js:lib generator specifically sets this to node to be more generic.\n  schema.testEnvironment ??= 'jsdom';\n\n  const tasks: GeneratorCallback[] = [];\n\n  const { root, projectType: _projectType } = readProjectConfiguration(\n    tree,\n    schema.project\n  );\n  const projectType = schema.projectType ?? _projectType;\n  const uiFramework =\n    schema.uiFramework ?? (await detectUiFramework(schema.project));\n  const isRootProject = root === '.';\n\n  tasks.push(await jsInitGenerator(tree, { ...schema, skipFormat: true }));\n\n  const pkgJson = readJson(tree, 'package.json');\n  const useVite5 =\n    major(coerce(pkgJson.devDependencies['vite']) ?? '6.0.0') === 5;\n  const initTask = await initGenerator(tree, {\n    projectRoot: root,\n    skipFormat: true,\n    addPlugin: schema.addPlugin,\n    useViteV5: useVite5,\n  });\n  tasks.push(initTask);\n  tasks.push(ensureDependencies(tree, { ...schema, uiFramework }));\n\n  addOrChangeTestTarget(tree, schema, hasPlugin);\n\n  if (!schema.skipViteConfig) {\n    if (uiFramework === 'angular') {\n      const relativeTestSetupPath = joinPathFragments('src', 'test-setup.ts');\n\n      const setupFile = joinPathFragments(root, relativeTestSetupPath);\n      if (!tree.exists(setupFile)) {\n        tree.write(\n          setupFile,\n          `import '@analogjs/vitest-angular/setup-zone';\n\nimport {\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting,\n} from '@angular/platform-browser-dynamic/testing';\nimport { getTestBed } from '@angular/core/testing';\n\ngetTestBed().initTestEnvironment(\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting()\n);\n`\n        );\n      }\n\n      createOrEditViteConfig(\n        tree,\n        {\n          project: schema.project,\n          includeLib: false,\n          includeVitest: true,\n          inSourceTests: false,\n          imports: [`import angular from '@analogjs/vite-plugin-angular'`],\n          plugins: ['angular()'],\n          setupFile: relativeTestSetupPath,\n          useEsmExtension: true,\n        },\n        true\n      );\n    } else if (uiFramework === 'react') {\n      createOrEditViteConfig(\n        tree,\n        {\n          project: schema.project,\n          includeLib: getProjectType(tree, root, projectType) === 'library',\n          includeVitest: true,\n          inSourceTests: schema.inSourceTests,\n          rollupOptionsExternal: [\n            \"'react'\",\n            \"'react-dom'\",\n            \"'react/jsx-runtime'\",\n          ],\n          imports: [\n            schema.compiler === 'swc'\n              ? `import react from '@vitejs/plugin-react-swc'`\n              : `import react from '@vitejs/plugin-react'`,\n          ],\n          plugins: ['react()'],\n          coverageProvider: schema.coverageProvider,\n        },\n        true\n      );\n    } else {\n      createOrEditViteConfig(\n        tree,\n        {\n          ...schema,\n          includeVitest: true,\n          includeLib: getProjectType(tree, root, projectType) === 'library',\n        },\n        true\n      );\n    }\n  }\n\n  const isTsSolutionSetup = isUsingTsSolutionSetup(tree);\n\n  createFiles(tree, schema, root, isTsSolutionSetup);\n  updateTsConfig(tree, schema, root, projectType);\n\n  if (isTsSolutionSetup) {\n    // in the TS solution setup, the test target depends on the build outputs\n    // so we need to setup the task pipeline accordingly\n    const nxJson = readNxJson(tree);\n    const testTarget = schema.testTarget ?? 'test';\n    nxJson.targetDefaults ??= {};\n    nxJson.targetDefaults[testTarget] ??= {};\n    nxJson.targetDefaults[testTarget].dependsOn ??= [];\n    nxJson.targetDefaults[testTarget].dependsOn = Array.from(\n      new Set([...nxJson.targetDefaults[testTarget].dependsOn, '^build'])\n    );\n    updateNxJson(tree, nxJson);\n  }\n\n  const devDependencies = await getCoverageProviderDependency(\n    tree,\n    schema.coverageProvider\n  );\n  devDependencies['@types/node'] = typesNodeVersion;\n\n  const installDependenciesTask = addDependenciesToPackageJson(\n    tree,\n    {},\n    devDependencies\n  );\n  tasks.push(installDependenciesTask);\n\n  // Setup workspace config file (https://vitest.dev/guide/workspace.html)\n  if (\n    !isRootProject &&\n    !tree.exists(`vitest.workspace.ts`) &&\n    !tree.exists(`vitest.workspace.js`) &&\n    !tree.exists(`vitest.workspace.json`) &&\n    !tree.exists(`vitest.projects.ts`) &&\n    !tree.exists(`vitest.projects.js`) &&\n    !tree.exists(`vitest.projects.json`)\n  ) {\n    tree.write(\n      'vitest.workspace.ts',\n      `export default ['**/vite.config.{mjs,js,ts,mts}', '**/vitest.config.{mjs,js,ts,mts}'];`\n    );\n  }\n\n  if (!schema.skipFormat) {\n    await formatFiles(tree);\n  }\n\n  return runTasksInSerial(...tasks);\n}\n\nfunction updateTsConfig(\n  tree: Tree,\n  options: VitestGeneratorSchema,\n  projectRoot: string,\n  projectType: ProjectType\n) {\n  const setupFile = tryFindSetupFile(tree, projectRoot);\n\n  if (tree.exists(joinPathFragments(projectRoot, 'tsconfig.spec.json'))) {\n    updateJson(\n      tree,\n      joinPathFragments(projectRoot, 'tsconfig.spec.json'),\n      (json) => {\n        if (!json.compilerOptions?.types?.includes('vitest')) {\n          if (json.compilerOptions?.types) {\n            json.compilerOptions.types.push('vitest');\n          } else {\n            json.compilerOptions ??= {};\n            json.compilerOptions.types = ['vitest'];\n          }\n        }\n\n        if (setupFile) {\n          json.files = [...(json.files ?? []), setupFile];\n        }\n\n        return json;\n      }\n    );\n\n    updateJson(\n      tree,\n      joinPathFragments(projectRoot, 'tsconfig.json'),\n      (json) => {\n        if (\n          json.references &&\n          !json.references.some((r) => r.path === './tsconfig.spec.json')\n        ) {\n          json.references.push({\n            path: './tsconfig.spec.json',\n          });\n        }\n        return json;\n      }\n    );\n  } else {\n    updateJson(\n      tree,\n      joinPathFragments(projectRoot, 'tsconfig.json'),\n      (json) => {\n        if (!json.compilerOptions?.types?.includes('vitest')) {\n          if (json.compilerOptions?.types) {\n            json.compilerOptions.types.push('vitest');\n          } else {\n            json.compilerOptions ??= {};\n            json.compilerOptions.types = ['vitest'];\n          }\n        }\n        return json;\n      }\n    );\n  }\n\n  let runtimeTsconfigPath = joinPathFragments(\n    projectRoot,\n    getProjectType(tree, projectRoot, projectType) === 'application'\n      ? 'tsconfig.app.json'\n      : 'tsconfig.lib.json'\n  );\n  if (options.runtimeTsconfigFileName) {\n    runtimeTsconfigPath = joinPathFragments(\n      projectRoot,\n      options.runtimeTsconfigFileName\n    );\n    if (!tree.exists(runtimeTsconfigPath)) {\n      throw new Error(\n        `Cannot find the specified runtimeTsConfigFileName (\"${options.runtimeTsconfigFileName}\") at the project root \"${projectRoot}\".`\n      );\n    }\n  }\n\n  if (tree.exists(runtimeTsconfigPath)) {\n    updateJson(tree, runtimeTsconfigPath, (json) => {\n      if (options.inSourceTests) {\n        (json.compilerOptions.types ??= []).push('vitest/importMeta');\n      } else {\n        const uniqueExclude = new Set([\n          ...(json.exclude || []),\n          'vite.config.ts',\n          'vite.config.mts',\n          'vitest.config.ts',\n          'vitest.config.mts',\n          'src/**/*.test.ts',\n          'src/**/*.spec.ts',\n          'src/**/*.test.tsx',\n          'src/**/*.spec.tsx',\n          'src/**/*.test.js',\n          'src/**/*.spec.js',\n          'src/**/*.test.jsx',\n          'src/**/*.spec.jsx',\n        ]);\n        json.exclude = [...uniqueExclude];\n      }\n\n      if (setupFile) {\n        json.exclude = [...(json.exclude ?? []), setupFile];\n      }\n\n      return json;\n    });\n  } else {\n    logger.warn(\n      `Couldn't find a runtime tsconfig file at ${runtimeTsconfigPath} to exclude the test files from. ` +\n        `If you're using a different filename for your runtime tsconfig, please provide it with the '--runtimeTsconfigFileName' flag.`\n    );\n  }\n}\n\nfunction createFiles(\n  tree: Tree,\n  options: VitestGeneratorSchema,\n  projectRoot: string,\n  isTsSolutionSetup: boolean\n) {\n  const rootOffset = offsetFromRoot(projectRoot);\n\n  generateFiles(tree, join(__dirname, 'files'), projectRoot, {\n    tmpl: '',\n    ...options,\n    projectRoot,\n    extendedConfig: isTsSolutionSetup\n      ? `${rootOffset}tsconfig.base.json`\n      : './tsconfig.json',\n    outDir: isTsSolutionSetup\n      ? `./out-tsc/vitest`\n      : `${rootOffset}dist/out-tsc`,\n  });\n}\n\nasync function getCoverageProviderDependency(\n  tree: Tree,\n  coverageProvider: VitestGeneratorSchema['coverageProvider']\n): Promise<Record<string, string>> {\n  const { vitestCoverageV8, vitestCoverageIstanbul } =\n    await getVitestDependenciesVersionsToInstall(tree);\n  switch (coverageProvider) {\n    case 'v8':\n      return {\n        '@vitest/coverage-v8': vitestCoverageV8,\n      };\n    case 'istanbul':\n      return {\n        '@vitest/coverage-istanbul': vitestCoverageIstanbul,\n      };\n    default:\n      return {\n        '@vitest/coverage-v8': vitestCoverageV8,\n      };\n  }\n}\n\nfunction tryFindSetupFile(tree: Tree, projectRoot: string) {\n  const setupFile = joinPathFragments('src', 'test-setup.ts');\n  if (tree.exists(joinPathFragments(projectRoot, setupFile))) {\n    return setupFile;\n  }\n}\n\nexport default vitestGenerator;\n"],"names":["vitestGenerator","vitestGeneratorInternal","tree","schema","hasPlugin","addPlugin","testEnvironment","tasks","root","projectType","_projectType","readProjectConfiguration","project","uiFramework","detectUiFramework","isRootProject","push","jsInitGenerator","skipFormat","pkgJson","readJson","coerce","useVite5","major","devDependencies","initTask","initGenerator","projectRoot","useViteV5","ensureDependencies","addOrChangeTestTarget","skipViteConfig","relativeTestSetupPath","joinPathFragments","setupFile","exists","write","createOrEditViteConfig","includeLib","includeVitest","inSourceTests","imports","plugins","useEsmExtension","getProjectType","rollupOptionsExternal","compiler","coverageProvider","isTsSolutionSetup","isUsingTsSolutionSetup","createFiles","updateTsConfig","nxJson","testTarget","readNxJson","targetDefaults","dependsOn","Array","from","Set","updateNxJson","getCoverageProviderDependency","typesNodeVersion","installDependenciesTask","addDependenciesToPackageJson","formatFiles","runTasksInSerial","options","tryFindSetupFile","updateJson","json","compilerOptions","types","includes","files","references","some","r","path","runtimeTsconfigPath","runtimeTsconfigFileName","Error","uniqueExclude","exclude","logger","warn","rootOffset","offsetFromRoot","generateFiles","join","__dirname","tmpl","extendedConfig","outDir","vitestCoverageV8","vitestCoverageIstanbul","getVitestDependenciesVersionsToInstall"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}