{"version":3,"sources":["../../../../../../packages/vite/src/generators/setup-paths-plugin/setup-paths-plugin.ts"],"sourcesContent":["import {\n  applyChangesToString,\n  ChangeType,\n  formatFiles,\n  globAsync,\n  Tree,\n} from '@nx/devkit';\nimport type { ArrayLiteralExpression, Node } from 'typescript';\n\nexport async function setupPathsPlugin(\n  tree: Tree,\n  schema: { skipFormat?: boolean }\n) {\n  const files = await globAsync(tree, [\n    '**/vite.config.{js,ts,mjs,mts,cjs,cts}',\n  ]);\n\n  for (const file of files) {\n    ensureImportExists(tree, file);\n    ensurePluginAdded(tree, file);\n  }\n\n  if (!schema.skipFormat) {\n    await formatFiles(tree);\n  }\n}\n\nfunction ensureImportExists(tree: Tree, file: string) {\n  const { tsquery } = require('@phenomnomnominal/tsquery');\n  let content = tree.read(file, 'utf-8');\n  const ast = tsquery.ast(content);\n  const allImports = tsquery.query(ast, 'ImportDeclaration');\n  if (content.includes('@nx/vite/plugins/nx-tsconfig-paths.plugin')) {\n    return;\n  }\n  if (allImports.length) {\n    const lastImport = allImports[allImports.length - 1];\n    tree.write(\n      file,\n      applyChangesToString(content, [\n        {\n          type: ChangeType.Insert,\n          index: lastImport.end + 1,\n          text: `import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';\\n`,\n        },\n      ])\n    );\n  } else {\n    if (file.endsWith('.cts') || file.endsWith('.cjs')) {\n      tree.write(\n        file,\n        applyChangesToString(content, [\n          {\n            type: ChangeType.Insert,\n            index: 0,\n            text: `const { nxViteTsPaths } = require('@nx/vite/plugins/nx-tsconfig-paths.plugin');\\n`,\n          },\n        ])\n      );\n    } else {\n      tree.write(\n        file,\n        applyChangesToString(content, [\n          {\n            type: ChangeType.Insert,\n            index: 0,\n            text: `import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';\\n`,\n          },\n        ])\n      );\n    }\n  }\n}\n\nfunction ensurePluginAdded(tree, file) {\n  const { tsquery } = require('@phenomnomnominal/tsquery');\n  const content = tree.read(file, 'utf-8');\n  const ast = tsquery.ast(content);\n  const foundDefineConfig = tsquery.query(\n    ast,\n    'CallExpression:has(Identifier[name=\"defineConfig\"])'\n  );\n  if (!foundDefineConfig.length) return content;\n\n  // Do not update defineConfig if it has an arrow function since it can be tricky and error-prone.\n  const defineUsingArrowFunction = tsquery.query(\n    foundDefineConfig[0],\n    'ArrowFunction'\n  );\n  if (defineUsingArrowFunction.length) return content;\n\n  const propertyAssignments = tsquery.query(\n    foundDefineConfig[0],\n    'PropertyAssignment'\n  );\n\n  if (propertyAssignments.length) {\n    const pluginsNode = tsquery.query(\n      foundDefineConfig[0],\n      'PropertyAssignment:has(Identifier[name=\"plugins\"])'\n    );\n\n    if (pluginsNode.length) {\n      const updated = tsquery.replace(\n        content,\n        'PropertyAssignment:has(Identifier[name=\"plugins\"])',\n        (node: Node) => {\n          const found = tsquery.query(\n            node,\n            'ArrayLiteralExpression'\n          ) as ArrayLiteralExpression[];\n          let updatedPluginsString = '';\n\n          const existingPluginNodes = found?.[0].elements ?? [];\n\n          for (const plugin of existingPluginNodes) {\n            updatedPluginsString += `${plugin.getText()},`;\n          }\n\n          if (\n            !existingPluginNodes?.some((node: Node) =>\n              node.getText().includes('nxViteTsPaths')\n            )\n          ) {\n            updatedPluginsString += ` nxViteTsPaths(),`;\n          }\n\n          return `plugins: [${updatedPluginsString}]`;\n        }\n      );\n      tree.write(file, updated);\n    } else {\n      tree.write(\n        file,\n        applyChangesToString(content, [\n          {\n            type: ChangeType.Insert,\n            index: propertyAssignments[0].getStart(),\n            text: `plugins: [nxViteTsPaths()],\n            `,\n          },\n        ])\n      );\n    }\n  } else {\n    tree.write(\n      file,\n      applyChangesToString(content, [\n        {\n          type: ChangeType.Insert,\n          index: foundDefineConfig[0].getStart() + 14, // length of \"defineConfig(\" + 1\n          text: `plugins: [nxViteTsPaths()],`,\n        },\n      ])\n    );\n  }\n}\n\nexport default setupPathsPlugin;\n"],"names":["setupPathsPlugin","tree","schema","files","globAsync","file","ensureImportExists","ensurePluginAdded","skipFormat","formatFiles","tsquery","require","content","read","ast","allImports","query","includes","length","lastImport","write","applyChangesToString","type","ChangeType","Insert","index","end","text","endsWith","foundDefineConfig","defineUsingArrowFunction","propertyAssignments","pluginsNode","updated","replace","node","found","updatedPluginsString","existingPluginNodes","elements","plugin","getText","some","getStart"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}