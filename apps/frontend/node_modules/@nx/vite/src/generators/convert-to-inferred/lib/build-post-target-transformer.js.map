{"version":3,"sources":["../../../../../../../packages/vite/src/generators/convert-to-inferred/lib/build-post-target-transformer.ts"],"sourcesContent":["import {\n  joinPathFragments,\n  type TargetConfiguration,\n  type Tree,\n} from '@nx/devkit';\nimport { tsquery } from '@phenomnomnominal/tsquery';\nimport { extname } from 'path/posix';\nimport {\n  addConfigValuesToViteConfig,\n  getViteConfigPath,\n  toProjectRelativePath,\n} from './utils';\nimport { processTargetOutputs } from '@nx/devkit/src/generators/plugin-migrations/plugin-migration-utils';\n\nexport function buildPostTargetTransformer(\n  target: TargetConfiguration,\n  tree: Tree,\n  projectDetails: { projectName: string; root: string },\n  inferredTargetConfiguration: TargetConfiguration\n) {\n  let viteConfigPath = getViteConfigPath(tree, projectDetails.root);\n\n  const configValues: Record<string, Record<string, unknown>> = {\n    default: {},\n  };\n\n  if (target.configurations) {\n    for (const configurationName in target.configurations) {\n      const configuration = target.configurations[configurationName];\n      configValues[configurationName] = {};\n      let configurationConfigFile = viteConfigPath;\n      if (configuration.configFile) {\n        if ('buildLibsFromSource' in target.options) {\n          configuration.buildLibsFromSource =\n            target.options.buildLibsFromSource;\n        }\n\n        configurationConfigFile = configuration.configFile;\n      }\n\n      removePropertiesFromTargetOptions(\n        tree,\n        configuration,\n        configurationConfigFile,\n        projectDetails.root,\n        configValues[configurationName],\n        configuration.configFile && configuration.configFile !== viteConfigPath\n      );\n    }\n\n    for (const configurationName in target.configurations) {\n      const configuration = target.configurations[configurationName];\n      if (\n        configuration.config &&\n        configuration.config !==\n          toProjectRelativePath(viteConfigPath, projectDetails.root)\n      ) {\n        const configFilePath = joinPathFragments(\n          projectDetails.root,\n          configuration.config\n        );\n        addConfigValuesToViteConfig(tree, configFilePath, configValues);\n      }\n    }\n\n    if (Object.keys(target.configurations).length === 0) {\n      if ('defaultConfiguration' in target) {\n        delete target.defaultConfiguration;\n      }\n      delete target.configurations;\n    }\n\n    if (\n      'defaultConfiguration' in target &&\n      !target.configurations[target.defaultConfiguration]\n    ) {\n      delete target.defaultConfiguration;\n    }\n  }\n\n  if (target.options) {\n    if (target.options.configFile) {\n      viteConfigPath = target.options.configFile;\n    }\n\n    removePropertiesFromTargetOptions(\n      tree,\n      target.options,\n      viteConfigPath,\n      projectDetails.root,\n      configValues['default'],\n      true\n    );\n  }\n\n  if (target.outputs) {\n    processTargetOutputs(\n      target,\n      [{ newName: 'outDir', oldName: 'outputPath' }],\n      inferredTargetConfiguration,\n      {\n        projectName: projectDetails.projectName,\n        projectRoot: projectDetails.root,\n      }\n    );\n  }\n\n  if (\n    target.inputs &&\n    target.inputs.every((i) => i === 'production' || i === '^production')\n  ) {\n    delete target.inputs;\n  }\n\n  addConfigValuesToViteConfig(tree, viteConfigPath, configValues);\n\n  return target;\n}\n\nfunction removePropertiesFromTargetOptions(\n  tree: Tree,\n  targetOptions: any,\n  viteConfigPath: string,\n  projectRoot: string,\n  configValues: Record<string, unknown>,\n  needsAstTransform = false\n) {\n  if ('configFile' in targetOptions) {\n    targetOptions.config = toProjectRelativePath(\n      targetOptions.configFile,\n      projectRoot\n    );\n    delete targetOptions.configFile;\n  }\n  if (targetOptions.outputPath) {\n    targetOptions.outDir = toProjectRelativePath(\n      targetOptions.outputPath,\n      projectRoot\n    );\n\n    delete targetOptions.outputPath;\n  }\n  if ('buildLibsFromSource' in targetOptions) {\n    configValues['buildLibsFromSource'] = targetOptions.buildLibsFromSource;\n\n    if (needsAstTransform) {\n      moveBuildLibsFromSourceToViteConfig(tree, viteConfigPath);\n    }\n    delete targetOptions.buildLibsFromSource;\n  }\n  if ('skipTypeCheck' in targetOptions) {\n    delete targetOptions.skipTypeCheck;\n  }\n  if ('generatePackageJson' in targetOptions) {\n    delete targetOptions.generatePackageJson;\n  }\n  if ('includeDevDependenciesInPackageJson' in targetOptions) {\n    delete targetOptions.includeDevDependenciesInPackageJson;\n  }\n  if ('tsConfig' in targetOptions) {\n    delete targetOptions.tsConfig;\n  }\n}\n\nexport function moveBuildLibsFromSourceToViteConfig(\n  tree: Tree,\n  configPath: string\n) {\n  const PLUGINS_PROPERTY_SELECTOR =\n    'PropertyAssignment:has(Identifier[name=plugins])';\n  const PLUGINS_NX_VITE_TS_PATHS_SELECTOR =\n    'PropertyAssignment:has(Identifier[name=plugins]) CallExpression:has(Identifier[name=nxViteTsPaths])';\n  const BUILD_LIBS_FROM_SOURCE_SELECTOR =\n    'PropertyAssignment:has(Identifier[name=plugins]) CallExpression:has(Identifier[name=nxViteTsPaths]) ObjectLiteralExpression > PropertyAssignment:has(Identifier[name=buildLibsFromSource])';\n\n  const nxViteTsPathsImport =\n    extname(configPath) === 'js'\n      ? 'const {nxViteTsPaths} = require(\"@nx/vite/plugins/nx-tsconfig-paths.plugin\");'\n      : 'import { nxViteTsPaths } from \"@nx/vite/plugins/nx-tsconfig-paths.plugin\";';\n  const plugin = `nxViteTsPaths({ buildLibsFromSource: options.buildLibsFromSource }),`;\n\n  const viteConfigContents = tree.read(configPath, 'utf-8');\n  let newViteConfigContents = viteConfigContents;\n\n  const ast = tsquery.ast(viteConfigContents);\n  const buildLibsFromSourceNodes = tsquery(\n    ast,\n    BUILD_LIBS_FROM_SOURCE_SELECTOR,\n    { visitAllChildren: true }\n  );\n  if (buildLibsFromSourceNodes.length > 0) {\n    return;\n  }\n\n  const nxViteTsPathsNodes = tsquery(ast, PLUGINS_NX_VITE_TS_PATHS_SELECTOR, {\n    visitAllChildren: true,\n  });\n  if (nxViteTsPathsNodes.length === 0) {\n    const pluginsNodes = tsquery(ast, PLUGINS_PROPERTY_SELECTOR, {\n      visitAllChildren: true,\n    });\n    if (pluginsNodes.length === 0) {\n      // Add plugin property\n      const configNodes = tsquery(\n        ast,\n        'CallExpression:has(Identifier[name=defineConfig]) > ObjectLiteralExpression',\n        { visitAllChildren: true }\n      );\n      if (configNodes.length === 0) {\n        return;\n      }\n\n      newViteConfigContents = `${nxViteTsPathsImport}\\n${viteConfigContents.slice(\n        0,\n        configNodes[0].getStart() + 1\n      )}plugins: [${plugin}],${viteConfigContents.slice(\n        configNodes[0].getStart() + 1\n      )}`;\n    } else {\n      // Add nxViteTsPaths plugin\n\n      const pluginsArrayNodes = tsquery(\n        pluginsNodes[0],\n        'ArrayLiteralExpression'\n      );\n      if (pluginsArrayNodes.length === 0) {\n        return;\n      }\n\n      newViteConfigContents = `${nxViteTsPathsImport}\\n${viteConfigContents.slice(\n        0,\n        pluginsArrayNodes[0].getStart() + 1\n      )}${plugin}${viteConfigContents.slice(\n        pluginsArrayNodes[0].getStart() + 1\n      )}`;\n    }\n  } else {\n    const pluginOptionsNodes = tsquery(\n      nxViteTsPathsNodes[0],\n      'ObjectLiteralExpression'\n    );\n    if (pluginOptionsNodes.length === 0) {\n      // Add the options\n      newViteConfigContents = `${viteConfigContents.slice(\n        0,\n        nxViteTsPathsNodes[0].getStart()\n      )}${plugin}${viteConfigContents.slice(nxViteTsPathsNodes[0].getEnd())}`;\n    } else {\n      // update the object\n      newViteConfigContents = `${viteConfigContents.slice(\n        0,\n        pluginOptionsNodes[0].getStart() + 1\n      )}buildLibsFromSource: options.buildLibsFromSource, ${viteConfigContents.slice(\n        pluginOptionsNodes[0].getStart() + 1\n      )}`;\n    }\n  }\n\n  tree.write(configPath, newViteConfigContents);\n}\n"],"names":["buildPostTargetTransformer","moveBuildLibsFromSourceToViteConfig","target","tree","projectDetails","inferredTargetConfiguration","viteConfigPath","getViteConfigPath","root","configValues","default","configurations","configurationName","configuration","configurationConfigFile","configFile","options","buildLibsFromSource","removePropertiesFromTargetOptions","config","toProjectRelativePath","configFilePath","joinPathFragments","addConfigValuesToViteConfig","Object","keys","length","defaultConfiguration","outputs","processTargetOutputs","newName","oldName","projectName","projectRoot","inputs","every","i","targetOptions","needsAstTransform","outputPath","outDir","skipTypeCheck","generatePackageJson","includeDevDependenciesInPackageJson","tsConfig","configPath","PLUGINS_PROPERTY_SELECTOR","PLUGINS_NX_VITE_TS_PATHS_SELECTOR","BUILD_LIBS_FROM_SOURCE_SELECTOR","nxViteTsPathsImport","extname","plugin","viteConfigContents","read","newViteConfigContents","ast","tsquery","buildLibsFromSourceNodes","visitAllChildren","nxViteTsPathsNodes","pluginsNodes","configNodes","slice","getStart","pluginsArrayNodes","pluginOptionsNodes","getEnd","write"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}