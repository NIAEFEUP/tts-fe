"use strict";
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    convertToInferred: function() {
        return convertToInferred;
    },
    default: function() {
        return _default;
    }
});
const _devkit = require("@nx/devkit");
const _executortopluginmigrator = require("@nx/devkit/src/generators/plugin-migrations/executor-to-plugin-migrator");
const _plugin = require("../../plugins/plugin");
const _buildposttargettransformer = require("./lib/build-post-target-transformer");
const _serveposttargettransformer = require("./lib/serve-post-target-transformer");
const _previewposttargettransformer = require("./lib/preview-post-target-transformer");
const _testposttargettransformer = require("./lib/test-post-target-transformer");
const _aggregatelogutil = require("@nx/devkit/src/generators/plugin-migrations/aggregate-log-util");
async function convertToInferred(tree, options) {
    const projectGraph = await (0, _devkit.createProjectGraphAsync)();
    const migrationLogs = new _aggregatelogutil.AggregatedLog();
    const migratedProjects = await (0, _executortopluginmigrator.migrateProjectExecutorsToPlugin)(tree, projectGraph, '@nx/vite/plugin', _plugin.createNodesV2, {
        buildTargetName: 'build',
        serveTargetName: 'serve',
        previewTargetName: 'preview',
        testTargetName: 'test',
        serveStaticTargetName: 'serve-static'
    }, [
        {
            executors: [
                '@nx/vite:build'
            ],
            postTargetTransformer: _buildposttargettransformer.buildPostTargetTransformer,
            targetPluginOptionMapper: (target)=>({
                    buildTargetName: target
                })
        },
        {
            executors: [
                '@nx/vite:dev-server'
            ],
            postTargetTransformer: (0, _serveposttargettransformer.servePostTargetTransformer)(migrationLogs),
            targetPluginOptionMapper: (target)=>({
                    serveTargetName: target
                })
        },
        {
            executors: [
                '@nx/vite:preview-server'
            ],
            postTargetTransformer: (0, _previewposttargettransformer.previewPostTargetTransformer)(migrationLogs),
            targetPluginOptionMapper: (target)=>({
                    previewTargetName: target
                })
        },
        {
            executors: [
                '@nx/vite:test'
            ],
            postTargetTransformer: _testposttargettransformer.testPostTargetTransformer,
            targetPluginOptionMapper: (target)=>({
                    testTargetName: target
                })
        }
    ], options.project);
    if (migratedProjects.size === 0) {
        throw new _executortopluginmigrator.NoTargetsToMigrateError();
    }
    if (!options.skipFormat) {
        await (0, _devkit.formatFiles)(tree);
    }
    return ()=>{
        migrationLogs.flushLogs();
    };
}
const _default = convertToInferred;

//# sourceMappingURL=convert-to-inferred.js.map