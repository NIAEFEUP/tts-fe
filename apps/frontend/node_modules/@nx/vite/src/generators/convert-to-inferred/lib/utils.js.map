{"version":3,"sources":["../../../../../../../packages/vite/src/generators/convert-to-inferred/lib/utils.ts"],"sourcesContent":["import { relative, resolve } from 'path/posix';\nimport { workspaceRoot, type Tree, joinPathFragments } from '@nx/devkit';\nimport { tsquery } from '@phenomnomnominal/tsquery';\n\nexport function toProjectRelativePath(\n  path: string,\n  projectRoot: string\n): string {\n  if (projectRoot === '.') {\n    // workspace and project root are the same, we normalize it to ensure it\n    // works with Jest since some paths only work when they start with `./`\n    return path.startsWith('.') ? path : `./${path}`;\n  }\n\n  const relativePath = relative(\n    resolve(workspaceRoot, projectRoot),\n    resolve(workspaceRoot, path)\n  );\n\n  return relativePath.startsWith('.') ? relativePath : `./${relativePath}`;\n}\n\nexport function getViteConfigPath(tree: Tree, root: string) {\n  return [\n    joinPathFragments(root, `vite.config.ts`),\n    joinPathFragments(root, `vite.config.cts`),\n    joinPathFragments(root, `vite.config.mts`),\n    joinPathFragments(root, `vite.config.js`),\n    joinPathFragments(root, `vite.config.cjs`),\n    joinPathFragments(root, `vite.config.mjs`),\n  ].find((f) => tree.exists(f));\n}\n\nexport function addConfigValuesToViteConfig(\n  tree: Tree,\n  configFile: string,\n  configValues: Record<string, Record<string, unknown>>\n) {\n  const IMPORT_PROPERTY_SELECTOR = 'ImportDeclaration';\n  const viteConfigContents = tree.read(configFile, 'utf-8');\n\n  const ast = tsquery.ast(viteConfigContents);\n  // AST TO GET SECTION TO APPEND TO\n  const importNodes = tsquery(ast, IMPORT_PROPERTY_SELECTOR, {\n    visitAllChildren: true,\n  });\n  if (importNodes.length === 0) {\n    return;\n  }\n  const lastImportNode = importNodes[importNodes.length - 1];\n\n  const configValuesString = `\n  // These options were migrated by @nx/vite:convert-to-inferred from the project.json file.\n  const configValues = ${JSON.stringify(configValues)};\n  \n  // Determine the correct configValue to use based on the configuration\n  const nxConfiguration = process.env.NX_TASK_TARGET_CONFIGURATION ?? 'default';\n  \n  const options = {\n    ...configValues.default,\n    ...(configValues[nxConfiguration] ?? {})\n  }`;\n\n  tree.write(\n    configFile,\n    `${viteConfigContents.slice(0, lastImportNode.getEnd())}\n  ${configValuesString}\n  ${viteConfigContents.slice(lastImportNode.getEnd())}`\n  );\n}\n"],"names":["addConfigValuesToViteConfig","getViteConfigPath","toProjectRelativePath","path","projectRoot","startsWith","relativePath","relative","resolve","workspaceRoot","tree","root","joinPathFragments","find","f","exists","configFile","configValues","IMPORT_PROPERTY_SELECTOR","viteConfigContents","read","ast","tsquery","importNodes","visitAllChildren","length","lastImportNode","configValuesString","JSON","stringify","write","slice","getEnd"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;IAiCgBA,2BAA2B;eAA3BA;;IAXAC,iBAAiB;eAAjBA;;IAlBAC,qBAAqB;eAArBA;;;uBAJkB;wBAC0B;yBACpC;AAEjB,SAASA,sBACdC,IAAY,EACZC,WAAmB;IAEnB,IAAIA,gBAAgB,KAAK;QACvB,wEAAwE;QACxE,uEAAuE;QACvE,OAAOD,KAAKE,UAAU,CAAC,OAAOF,OAAO,CAAC,EAAE,EAAEA,KAAK,CAAC;IAClD;IAEA,MAAMG,eAAeC,IAAAA,eAAQ,EAC3BC,IAAAA,cAAO,EAACC,qBAAa,EAAEL,cACvBI,IAAAA,cAAO,EAACC,qBAAa,EAAEN;IAGzB,OAAOG,aAAaD,UAAU,CAAC,OAAOC,eAAe,CAAC,EAAE,EAAEA,aAAa,CAAC;AAC1E;AAEO,SAASL,kBAAkBS,IAAU,EAAEC,IAAY;IACxD,OAAO;QACLC,IAAAA,yBAAiB,EAACD,MAAM,CAAC,cAAc,CAAC;QACxCC,IAAAA,yBAAiB,EAACD,MAAM,CAAC,eAAe,CAAC;QACzCC,IAAAA,yBAAiB,EAACD,MAAM,CAAC,eAAe,CAAC;QACzCC,IAAAA,yBAAiB,EAACD,MAAM,CAAC,cAAc,CAAC;QACxCC,IAAAA,yBAAiB,EAACD,MAAM,CAAC,eAAe,CAAC;QACzCC,IAAAA,yBAAiB,EAACD,MAAM,CAAC,eAAe,CAAC;KAC1C,CAACE,IAAI,CAAC,CAACC,IAAMJ,KAAKK,MAAM,CAACD;AAC5B;AAEO,SAASd,4BACdU,IAAU,EACVM,UAAkB,EAClBC,YAAqD;IAErD,MAAMC,2BAA2B;IACjC,MAAMC,qBAAqBT,KAAKU,IAAI,CAACJ,YAAY;IAEjD,MAAMK,MAAMC,gBAAO,CAACD,GAAG,CAACF;IACxB,kCAAkC;IAClC,MAAMI,cAAcD,IAAAA,gBAAO,EAACD,KAAKH,0BAA0B;QACzDM,kBAAkB;IACpB;IACA,IAAID,YAAYE,MAAM,KAAK,GAAG;QAC5B;IACF;IACA,MAAMC,iBAAiBH,WAAW,CAACA,YAAYE,MAAM,GAAG,EAAE;IAE1D,MAAME,qBAAqB,CAAC;;uBAEP,EAAEC,KAAKC,SAAS,CAACZ,cAAc;;;;;;;;GAQnD,CAAC;IAEFP,KAAKoB,KAAK,CACRd,YACA,CAAC,EAAEG,mBAAmBY,KAAK,CAAC,GAAGL,eAAeM,MAAM,IAAI;EAC1D,EAAEL,mBAAmB;EACrB,EAAER,mBAAmBY,KAAK,CAACL,eAAeM,MAAM,IAAI,CAAC;AAEvD"}