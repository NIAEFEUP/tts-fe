{"version":3,"sources":["../../../../../../packages/vite/src/generators/convert-to-inferred/convert-to-inferred.ts"],"sourcesContent":["import { createProjectGraphAsync, formatFiles, type Tree } from '@nx/devkit';\nimport {\n  migrateProjectExecutorsToPlugin,\n  NoTargetsToMigrateError,\n} from '@nx/devkit/src/generators/plugin-migrations/executor-to-plugin-migrator';\nimport { createNodesV2, VitePluginOptions } from '../../plugins/plugin';\nimport { buildPostTargetTransformer } from './lib/build-post-target-transformer';\nimport { servePostTargetTransformer } from './lib/serve-post-target-transformer';\nimport { previewPostTargetTransformer } from './lib/preview-post-target-transformer';\nimport { testPostTargetTransformer } from './lib/test-post-target-transformer';\nimport { AggregatedLog } from '@nx/devkit/src/generators/plugin-migrations/aggregate-log-util';\n\ninterface Schema {\n  project?: string;\n  skipFormat?: boolean;\n}\n\nexport async function convertToInferred(tree: Tree, options: Schema) {\n  const projectGraph = await createProjectGraphAsync();\n  const migrationLogs = new AggregatedLog();\n\n  const migratedProjects =\n    await migrateProjectExecutorsToPlugin<VitePluginOptions>(\n      tree,\n      projectGraph,\n      '@nx/vite/plugin',\n      createNodesV2,\n      {\n        buildTargetName: 'build',\n        serveTargetName: 'serve',\n        previewTargetName: 'preview',\n        testTargetName: 'test',\n        serveStaticTargetName: 'serve-static',\n      },\n      [\n        {\n          executors: ['@nx/vite:build'],\n          postTargetTransformer: buildPostTargetTransformer,\n          targetPluginOptionMapper: (target) => ({ buildTargetName: target }),\n        },\n        {\n          executors: ['@nx/vite:dev-server'],\n          postTargetTransformer: servePostTargetTransformer(migrationLogs),\n          targetPluginOptionMapper: (target) => ({ serveTargetName: target }),\n        },\n        {\n          executors: ['@nx/vite:preview-server'],\n          postTargetTransformer: previewPostTargetTransformer(migrationLogs),\n          targetPluginOptionMapper: (target) => ({ previewTargetName: target }),\n        },\n        {\n          executors: ['@nx/vite:test'],\n          postTargetTransformer: testPostTargetTransformer,\n          targetPluginOptionMapper: (target) => ({ testTargetName: target }),\n        },\n      ],\n      options.project\n    );\n\n  if (migratedProjects.size === 0) {\n    throw new NoTargetsToMigrateError();\n  }\n\n  if (!options.skipFormat) {\n    await formatFiles(tree);\n  }\n\n  return () => {\n    migrationLogs.flushLogs();\n  };\n}\n\nexport default convertToInferred;\n"],"names":["convertToInferred","tree","options","projectGraph","createProjectGraphAsync","migrationLogs","AggregatedLog","migratedProjects","migrateProjectExecutorsToPlugin","createNodesV2","buildTargetName","serveTargetName","previewTargetName","testTargetName","serveStaticTargetName","executors","postTargetTransformer","buildPostTargetTransformer","targetPluginOptionMapper","target","servePostTargetTransformer","previewPostTargetTransformer","testPostTargetTransformer","project","size","NoTargetsToMigrateError","skipFormat","formatFiles","flushLogs"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;IAiBsBA,iBAAiB;eAAjBA;;IAuDtB,OAAiC;eAAjC;;;wBAxEgE;0CAIzD;wBAC0C;4CACN;4CACA;8CACE;2CACH;kCACZ;AAOvB,eAAeA,kBAAkBC,IAAU,EAAEC,OAAe;IACjE,MAAMC,eAAe,MAAMC,IAAAA,+BAAuB;IAClD,MAAMC,gBAAgB,IAAIC,+BAAa;IAEvC,MAAMC,mBACJ,MAAMC,IAAAA,yDAA+B,EACnCP,MACAE,cACA,mBACAM,qBAAa,EACb;QACEC,iBAAiB;QACjBC,iBAAiB;QACjBC,mBAAmB;QACnBC,gBAAgB;QAChBC,uBAAuB;IACzB,GACA;QACE;YACEC,WAAW;gBAAC;aAAiB;YAC7BC,uBAAuBC,sDAA0B;YACjDC,0BAA0B,CAACC,SAAY,CAAA;oBAAET,iBAAiBS;gBAAO,CAAA;QACnE;QACA;YACEJ,WAAW;gBAAC;aAAsB;YAClCC,uBAAuBI,IAAAA,sDAA0B,EAACf;YAClDa,0BAA0B,CAACC,SAAY,CAAA;oBAAER,iBAAiBQ;gBAAO,CAAA;QACnE;QACA;YACEJ,WAAW;gBAAC;aAA0B;YACtCC,uBAAuBK,IAAAA,0DAA4B,EAAChB;YACpDa,0BAA0B,CAACC,SAAY,CAAA;oBAAEP,mBAAmBO;gBAAO,CAAA;QACrE;QACA;YACEJ,WAAW;gBAAC;aAAgB;YAC5BC,uBAAuBM,oDAAyB;YAChDJ,0BAA0B,CAACC,SAAY,CAAA;oBAAEN,gBAAgBM;gBAAO,CAAA;QAClE;KACD,EACDjB,QAAQqB,OAAO;IAGnB,IAAIhB,iBAAiBiB,IAAI,KAAK,GAAG;QAC/B,MAAM,IAAIC,iDAAuB;IACnC;IAEA,IAAI,CAACvB,QAAQwB,UAAU,EAAE;QACvB,MAAMC,IAAAA,mBAAW,EAAC1B;IACpB;IAEA,OAAO;QACLI,cAAcuB,SAAS;IACzB;AACF;MAEA,WAAe5B"}