{"version":3,"sources":["../../../../../../packages/vite/src/generators/configuration/configuration.ts"],"sourcesContent":["import {\n  formatFiles,\n  GeneratorCallback,\n  joinPathFragments,\n  readJson,\n  readNxJson,\n  readProjectConfiguration,\n  runTasksInSerial,\n  Tree,\n  updateJson,\n  writeJson,\n} from '@nx/devkit';\nimport {\n  getUpdatedPackageJsonContent,\n  initGenerator as jsInitGenerator,\n} from '@nx/js';\nimport { getImportPath } from '@nx/js/src/utils/get-import-path';\nimport {\n  getProjectType,\n  isUsingTsSolutionSetup,\n} from '@nx/js/src/utils/typescript/ts-solution-setup';\nimport { join } from 'node:path/posix';\nimport type { PackageJson } from 'nx/src/utils/package-json';\nimport { ensureDependencies } from '../../utils/ensure-dependencies';\nimport {\n  addBuildTarget,\n  addPreviewTarget,\n  addServeTarget,\n  createOrEditViteConfig,\n  TargetFlags,\n} from '../../utils/generator-utils';\nimport initGenerator from '../init/init';\nimport vitestGenerator from '../vitest/vitest-generator';\nimport { convertNonVite } from './lib/convert-non-vite';\nimport { ViteConfigurationGeneratorSchema } from './schema';\n\nexport function viteConfigurationGenerator(\n  host: Tree,\n  schema: ViteConfigurationGeneratorSchema\n) {\n  return viteConfigurationGeneratorInternal(host, {\n    addPlugin: false,\n    ...schema,\n  });\n}\n\nexport async function viteConfigurationGeneratorInternal(\n  tree: Tree,\n  schema: ViteConfigurationGeneratorSchema\n) {\n  const tasks: GeneratorCallback[] = [];\n\n  const projectConfig = readProjectConfiguration(tree, schema.project);\n  const { targets, root: projectRoot } = projectConfig;\n\n  const projectType = getProjectType(\n    tree,\n    projectConfig.root,\n    schema.projectType ?? projectConfig.projectType\n  );\n\n  schema.includeLib ??= projectType === 'library';\n\n  // Setting default to jsdom since it is the most common use case (React, Web).\n  // The @nx/js:lib generator specifically sets this to node to be more generic.\n  schema.testEnvironment ??= 'jsdom';\n\n  /**\n   * This is for when we are converting an existing project\n   * to use the vite executors.\n   */\n  let projectAlreadyHasViteTargets: TargetFlags = {};\n\n  if (!schema.newProject) {\n    await convertNonVite(tree, schema, projectRoot, projectType, targets);\n  }\n\n  const jsInitTask = await jsInitGenerator(tree, {\n    ...schema,\n    skipFormat: true,\n    tsConfigName: projectRoot === '.' ? 'tsconfig.json' : 'tsconfig.base.json',\n  });\n  tasks.push(jsInitTask);\n  const initTask = await initGenerator(tree, {\n    ...schema,\n    projectRoot,\n    skipFormat: true,\n  });\n  tasks.push(initTask);\n  tasks.push(ensureDependencies(tree, schema));\n\n  const nxJson = readNxJson(tree);\n  const addPluginDefault =\n    process.env.NX_ADD_PLUGINS !== 'false' &&\n    nxJson.useInferencePlugins !== false;\n  schema.addPlugin ??= addPluginDefault;\n\n  const hasPlugin = nxJson.plugins?.some((p) =>\n    typeof p === 'string'\n      ? p === '@nx/vite/plugin'\n      : p.plugin === '@nx/vite/plugin'\n  );\n\n  if (!hasPlugin) {\n    if (!projectAlreadyHasViteTargets.build) {\n      addBuildTarget(tree, schema, 'build');\n    }\n\n    if (!schema.includeLib) {\n      if (!projectAlreadyHasViteTargets.serve) {\n        addServeTarget(tree, schema, 'serve');\n      }\n      if (!projectAlreadyHasViteTargets.preview) {\n        addPreviewTarget(tree, schema, 'preview');\n      }\n    }\n  }\n  if (projectType === 'library') {\n    // update tsconfig.lib.json to include vite/client\n    updateJson(\n      tree,\n      joinPathFragments(projectRoot, 'tsconfig.lib.json'),\n      (json) => {\n        json.compilerOptions ??= {};\n        json.compilerOptions.types ??= [];\n        if (!json.compilerOptions.types.includes('vite/client')) {\n          json.compilerOptions.types.push('vite/client');\n        }\n        return json;\n      }\n    );\n  }\n\n  if (!schema.newProject) {\n    // We are converting existing project to use Vite\n    if (schema.uiFramework === 'react') {\n      createOrEditViteConfig(\n        tree,\n        {\n          project: schema.project,\n          includeLib: schema.includeLib,\n          includeVitest: schema.includeVitest,\n          inSourceTests: schema.inSourceTests,\n          rollupOptionsExternal: [\n            \"'react'\",\n            \"'react-dom'\",\n            \"'react/jsx-runtime'\",\n          ],\n          imports: [\n            schema.compiler === 'swc'\n              ? `import react from '@vitejs/plugin-react-swc'`\n              : `import react from '@vitejs/plugin-react'`,\n          ],\n          plugins: ['react()'],\n        },\n        false,\n        undefined\n      );\n    } else {\n      createOrEditViteConfig(tree, schema, false, projectAlreadyHasViteTargets);\n    }\n  }\n\n  if (schema.includeVitest) {\n    const vitestTask = await vitestGenerator(tree, {\n      project: schema.project,\n      uiFramework: schema.uiFramework,\n      inSourceTests: schema.inSourceTests,\n      coverageProvider: 'v8',\n      skipViteConfig: true,\n      testTarget: 'test',\n      skipFormat: true,\n      addPlugin: schema.addPlugin,\n      compiler: schema.compiler,\n      projectType,\n    });\n    tasks.push(vitestTask);\n  }\n\n  if (isUsingTsSolutionSetup(tree)) {\n    updatePackageJson(tree, schema, projectType);\n  }\n\n  if (!schema.skipFormat) {\n    await formatFiles(tree);\n  }\n\n  return runTasksInSerial(...tasks);\n}\n\nexport default viteConfigurationGenerator;\n\nfunction updatePackageJson(\n  tree: Tree,\n  options: ViteConfigurationGeneratorSchema,\n  projectType: 'application' | 'library'\n) {\n  const project = readProjectConfiguration(tree, options.project);\n\n  const packageJsonPath = join(project.root, 'package.json');\n  let packageJson: PackageJson;\n  if (tree.exists(packageJsonPath)) {\n    packageJson = readJson(tree, packageJsonPath);\n  } else {\n    packageJson = {\n      name: getImportPath(tree, options.project),\n      version: '0.0.1',\n    };\n    if (getProjectType(tree, project.root, projectType) === 'application') {\n      packageJson.private = true;\n    }\n  }\n\n  if (projectType === 'library') {\n    // we always write/override the vite and project config with some set values,\n    // so we can rely on them\n    const main = join(project.root, 'src/index.ts');\n    // we configure the dts plugin with the entryRoot set to `src`\n    const rootDir = join(project.root, 'src');\n    const outputPath = joinPathFragments(project.root, 'dist');\n\n    // the file must exist in the TS solution setup, which is the only case this\n    // function is called\n    const tsconfigBase = readJson(tree, 'tsconfig.base.json');\n\n    packageJson = getUpdatedPackageJsonContent(packageJson, {\n      main,\n      outputPath,\n      projectRoot: project.root,\n      rootDir,\n      generateExportsField: true,\n      packageJsonPath,\n      format: ['esm'],\n      skipDevelopmentExports:\n        !tsconfigBase.compilerOptions?.customConditions?.includes(\n          'development'\n        ),\n    });\n  }\n\n  writeJson(tree, packageJsonPath, packageJson);\n}\n"],"names":["viteConfigurationGenerator","viteConfigurationGeneratorInternal","host","schema","addPlugin","tree","nxJson","tasks","projectConfig","readProjectConfiguration","project","targets","root","projectRoot","projectType","getProjectType","includeLib","testEnvironment","projectAlreadyHasViteTargets","newProject","convertNonVite","jsInitTask","jsInitGenerator","skipFormat","tsConfigName","push","initTask","initGenerator","ensureDependencies","readNxJson","addPluginDefault","process","env","NX_ADD_PLUGINS","useInferencePlugins","hasPlugin","plugins","some","p","plugin","build","addBuildTarget","serve","addServeTarget","preview","addPreviewTarget","updateJson","joinPathFragments","json","compilerOptions","types","includes","uiFramework","createOrEditViteConfig","includeVitest","inSourceTests","rollupOptionsExternal","imports","compiler","undefined","vitestTask","vitestGenerator","coverageProvider","skipViteConfig","testTarget","isUsingTsSolutionSetup","updatePackageJson","formatFiles","runTasksInSerial","options","packageJsonPath","join","packageJson","exists","readJson","name","getImportPath","version","private","tsconfigBase","main","rootDir","outputPath","getUpdatedPackageJsonContent","generateExportsField","format","skipDevelopmentExports","customConditions","writeJson"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}