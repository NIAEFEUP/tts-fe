{"version":3,"sources":["../../../../../../packages/vite/src/executors/dev-server/dev-server.impl.ts"],"sourcesContent":["import {\n  ExecutorContext,\n  joinPathFragments,\n  parseTargetString,\n} from '@nx/devkit';\nimport {\n  getNxTargetOptions,\n  getViteServerOptions,\n  normalizeViteConfigFilePath,\n} from '../../utils/options-utils';\nimport { ViteDevServerExecutorOptions } from './schema';\nimport { ViteBuildExecutorOptions } from '../build/schema';\nimport {\n  createBuildableTsConfig,\n  loadViteDynamicImport,\n} from '../../utils/executor-utils';\nimport { relative } from 'path';\nimport { getBuildExtraArgs } from '../build/build.impl';\n\nexport async function* viteDevServerExecutor(\n  options: ViteDevServerExecutorOptions,\n  context: ExecutorContext\n): AsyncGenerator<{ success: boolean; baseUrl: string }> {\n  process.env.VITE_CJS_IGNORE_WARNING = 'true';\n  // Allows ESM to be required in CJS modules. Vite will be published as ESM in the future.\n  const { mergeConfig, createServer, resolveConfig } =\n    await loadViteDynamicImport();\n\n  const projectRoot =\n    context.projectsConfigurations.projects[context.projectName].root;\n  const root =\n    projectRoot === '.'\n      ? process.cwd()\n      : relative(context.cwd, joinPathFragments(context.root, projectRoot));\n  createBuildableTsConfig(projectRoot, options, context);\n\n  // Retrieve the option for the configured buildTarget.\n  const buildTargetOptions: ViteBuildExecutorOptions = getNxTargetOptions(\n    options.buildTarget,\n    context\n  );\n\n  const { configuration } = parseTargetString(options.buildTarget, context);\n\n  const { buildOptions, otherOptions: otherOptionsFromBuild } =\n    await getBuildExtraArgs(buildTargetOptions);\n\n  const viteConfigPath = normalizeViteConfigFilePath(\n    context.root,\n    projectRoot,\n    buildTargetOptions.configFile\n  );\n  const { serverOptions, otherOptions } = await getServerExtraArgs(\n    options,\n    configuration,\n    buildOptions,\n    otherOptionsFromBuild\n  );\n  const defaultMode =\n    otherOptions?.mode ?? buildTargetOptions?.['mode'] ?? 'development';\n  const resolved = await resolveConfig(\n    {\n      configFile: viteConfigPath,\n      mode: defaultMode,\n    },\n    'serve',\n    defaultMode,\n    process.env.NODE_ENV ?? defaultMode\n  );\n\n  // vite InlineConfig\n  const serverConfig = mergeConfig(\n    {\n      // This should not be needed as it's going to be set in vite.config.ts\n      // but leaving it here in case someone did not migrate correctly\n      root: resolved.root ?? root,\n      configFile: viteConfigPath,\n    },\n    {\n      server: {\n        ...(await getViteServerOptions(options, context)),\n        ...serverOptions,\n      },\n      ...otherOptions,\n    }\n  );\n\n  try {\n    const server = await createServer(serverConfig);\n    await runViteDevServer(server);\n    const resolvedUrls = [\n      ...server.resolvedUrls.local,\n      ...server.resolvedUrls.network,\n    ];\n\n    yield {\n      success: true,\n      baseUrl: resolvedUrls[0] ?? '',\n    };\n  } catch (e) {\n    console.error(e);\n    yield {\n      success: false,\n      baseUrl: '',\n    };\n  }\n\n  await new Promise<void>((resolve) => {\n    process.once('SIGINT', () => resolve());\n    process.once('SIGTERM', () => resolve());\n    process.once('exit', () => resolve());\n  });\n}\n\n// vite ViteDevServer\nasync function runViteDevServer(server: Record<string, any>): Promise<void> {\n  await server.listen();\n\n  server.printUrls();\n\n  const processOnExit = async () => {\n    await server.close();\n  };\n\n  process.once('SIGINT', processOnExit);\n  process.once('SIGTERM', processOnExit);\n  process.once('exit', processOnExit);\n}\n\nexport default viteDevServerExecutor;\n\nasync function getServerExtraArgs(\n  options: ViteDevServerExecutorOptions,\n  configuration: string | undefined,\n  buildOptionsFromBuildTarget: Record<string, unknown> | undefined,\n  otherOptionsFromBuildTarget: Record<string, unknown> | undefined\n): Promise<{\n  // vite ServerOptions\n  serverOptions: Record<string, unknown>;\n  otherOptions: Record<string, any>;\n}> {\n  // support passing extra args to vite cli\n  const schema = await import('./schema.json');\n  const extraArgs = {};\n  for (const key of Object.keys(options)) {\n    if (!schema.properties[key]) {\n      extraArgs[key] = options[key];\n    }\n  }\n\n  let serverOptions: Record<string, unknown> = {};\n  const serverSchemaKeys = [\n    'hmr',\n    'warmup',\n    'watch',\n    'middlewareMode',\n    'fs',\n    'origin',\n    'preTransformRequests',\n    'sourcemapIgnoreList',\n    'port',\n    'strictPort',\n    'host',\n    'https',\n    'open',\n    'proxy',\n    'cors',\n    'headers',\n  ];\n\n  let otherOptions = {};\n  for (const key of Object.keys(extraArgs)) {\n    if (serverSchemaKeys.includes(key)) {\n      serverOptions[key] = extraArgs[key];\n    } else {\n      otherOptions[key] = extraArgs[key];\n    }\n  }\n\n  if (configuration) {\n    serverOptions = {\n      ...serverOptions,\n      watch: buildOptionsFromBuildTarget?.watch ?? serverOptions?.watch,\n    };\n    otherOptions = {\n      ...otherOptions,\n      ...(otherOptionsFromBuildTarget ?? {}),\n    };\n  }\n\n  return {\n    serverOptions,\n    otherOptions,\n  };\n}\n"],"names":["viteDevServerExecutor","options","context","process","env","VITE_CJS_IGNORE_WARNING","mergeConfig","createServer","resolveConfig","loadViteDynamicImport","projectRoot","projectsConfigurations","projects","projectName","root","cwd","relative","joinPathFragments","createBuildableTsConfig","buildTargetOptions","getNxTargetOptions","buildTarget","configuration","parseTargetString","buildOptions","otherOptions","otherOptionsFromBuild","getBuildExtraArgs","viteConfigPath","normalizeViteConfigFilePath","configFile","serverOptions","getServerExtraArgs","defaultMode","mode","resolved","NODE_ENV","serverConfig","server","getViteServerOptions","runViteDevServer","resolvedUrls","local","network","success","baseUrl","e","console","error","Promise","resolve","once","listen","printUrls","processOnExit","close","buildOptionsFromBuildTarget","otherOptionsFromBuildTarget","schema","extraArgs","key","Object","keys","properties","serverSchemaKeys","includes","watch"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}