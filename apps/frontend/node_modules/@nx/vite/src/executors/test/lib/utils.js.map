{"version":3,"sources":["../../../../../../../packages/vite/src/executors/test/lib/utils.ts"],"sourcesContent":["import {\n  ExecutorContext,\n  joinPathFragments,\n  logger,\n  stripIndents,\n} from '@nx/devkit';\nimport { VitestExecutorOptions } from '../schema';\nimport { normalizeViteConfigFilePath } from '../../../utils/options-utils';\nimport { relative } from 'path';\nimport {\n  loadViteDynamicImport,\n  loadVitestDynamicImport,\n} from '../../../utils/executor-utils';\n\nexport async function getOptions(\n  options: VitestExecutorOptions,\n  context: ExecutorContext,\n  projectRoot: string\n) {\n  // Allows ESM to be required in CJS modules. Vite will be published as ESM in the future.\n  const { loadConfigFromFile, mergeConfig } = await loadViteDynamicImport();\n\n  const viteConfigPath = normalizeViteConfigFilePath(\n    context.root,\n    projectRoot,\n    options.configFile\n  );\n\n  if (!viteConfigPath) {\n    throw new Error(\n      stripIndents`\n        Unable to load test config from config file ${viteConfigPath}.\n        \n        Please make sure that vitest is configured correctly, \n        or use the @nx/vite:vitest generator to configure it for you.\n        You can read more here: https://nx.dev/nx-api/vite/generators/vitest\n        `\n    );\n  }\n\n  const resolved = await loadConfigFromFile(\n    {\n      mode: options?.mode ?? 'production',\n      command: 'serve',\n    },\n    viteConfigPath\n  );\n\n  if (!viteConfigPath || !resolved?.config?.['test']) {\n    logger.warn(stripIndents`Unable to load test config from config file ${\n      resolved?.path ?? viteConfigPath\n    }\n  Some settings may not be applied as expected.\n  You can manually set the config in the project, ${\n    context.projectName\n  }, configuration.\n        `);\n  }\n  const root =\n    projectRoot === '.'\n      ? process.cwd()\n      : relative(context.cwd, joinPathFragments(context.root, projectRoot));\n\n  const { parseCLI } = await loadVitestDynamicImport();\n\n  const {\n    options: { watch, ...normalizedExtraArgs },\n  } = parseCLI(['vitest', ...getOptionsAsArgv(options)]);\n\n  const { reportsDirectory, coverage, ...restNormalizedArgs } =\n    normalizedExtraArgs as Record<string, any>;\n\n  const settings = {\n    // Explicitly set watch mode to false if not provided otherwise vitest\n    // will enable watch mode by default for non CI environments\n    watch: watch ?? false,\n    ...restNormalizedArgs,\n    // This should not be needed as it's going to be set in vite.config.ts\n    // but leaving it here in case someone did not migrate correctly\n    root: resolved.config.root ?? root,\n    config: viteConfigPath,\n    coverage: {\n      ...(coverage ?? {}),\n      ...(reportsDirectory && { reportsDirectory }),\n    },\n  };\n\n  return mergeConfig(resolved?.config?.['test'] ?? {}, settings);\n}\n\nexport function getOptionsAsArgv(obj: Record<string, any>): string[] {\n  const argv: string[] = [];\n\n  for (const [key, value] of Object.entries(obj)) {\n    if (Array.isArray(value)) {\n      value.forEach((item) => argv.push(`--${key}=${item}`));\n    } else if (typeof value === 'object' && value !== null) {\n      argv.push(`--${key}='${JSON.stringify(value)}'`);\n    } else {\n      argv.push(`--${key}=${value}`);\n    }\n  }\n\n  return argv;\n}\n"],"names":["getOptions","getOptionsAsArgv","options","context","projectRoot","resolved","loadConfigFromFile","mergeConfig","loadViteDynamicImport","viteConfigPath","normalizeViteConfigFilePath","root","configFile","Error","stripIndents","mode","command","config","logger","warn","path","projectName","process","cwd","relative","joinPathFragments","parseCLI","loadVitestDynamicImport","watch","normalizedExtraArgs","reportsDirectory","coverage","restNormalizedArgs","settings","obj","argv","key","value","Object","entries","Array","isArray","forEach","item","push","JSON","stringify"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;IAcsBA,UAAU;eAAVA;;IA4ENC,gBAAgB;eAAhBA;;;;;wBArFT;8BAEqC;sBACnB;+BAIlB;AAEA,eAAeD,WACpBE,OAA8B,EAC9BC,OAAwB,EACxBC,WAAmB;QA+BKC,kBAuCLA;IApEnB,yFAAyF;IACzF,MAAM,EAAEC,kBAAkB,EAAEC,WAAW,EAAE,GAAG,MAAMC,IAAAA,oCAAqB;IAEvE,MAAMC,iBAAiBC,IAAAA,yCAA2B,EAChDP,QAAQQ,IAAI,EACZP,aACAF,QAAQU,UAAU;IAGpB,IAAI,CAACH,gBAAgB;QACnB,MAAM,IAAII,MACRC,IAAAA,oBAAY,CAAA,CAAC;oDACiC,EAAEL,eAAe;;;;;QAK7D,CAAC;IAEP;QAIUP;IAFV,MAAMG,WAAW,MAAMC,mBACrB;QACES,MAAMb,CAAAA,gBAAAA,2BAAAA,QAASa,IAAI,YAAbb,gBAAiB;QACvBc,SAAS;IACX,GACAP;IAGF,IAAI,CAACA,kBAAkB,EAACJ,6BAAAA,mBAAAA,SAAUY,MAAM,qBAAhBZ,gBAAkB,CAAC,OAAO,GAAE;YAEhDA;QADFa,cAAM,CAACC,IAAI,CAACL,IAAAA,oBAAY,CAAA,CAAC,4CAA4C,EACnET,CAAAA,iBAAAA,4BAAAA,SAAUe,IAAI,YAAdf,iBAAkBI,eACnB;;kDAE6C,EAC9CN,QAAQkB,WAAW,CACpB;QACK,CAAC;IACP;IACA,MAAMV,OACJP,gBAAgB,MACZkB,QAAQC,GAAG,KACXC,IAAAA,cAAQ,EAACrB,QAAQoB,GAAG,EAAEE,IAAAA,yBAAiB,EAACtB,QAAQQ,IAAI,EAAEP;IAE5D,MAAM,EAAEsB,QAAQ,EAAE,GAAG,MAAMC,IAAAA,sCAAuB;IAElD,MAEID,YAAAA,SAAS;QAAC;WAAazB,iBAAiBC;KAAS,GAF/C,EACJA,SAAS,EAAE0B,KAAK,EAA0B,EAC3C,GAAGF,WADmBG,yDACnBH,UADFxB;QAAW0B;;IAGb,MAAM,EAAEE,gBAAgB,EAAEC,QAAQ,EAAyB,GACzDF,qBADqCG,wDACrCH;QADMC;QAAkBC;;QAUlB1B;IAPR,MAAM4B,WAAW;QACf,sEAAsE;QACtE,4DAA4D;QAC5DL,OAAOA,gBAAAA,QAAS;OACbI;QACH,sEAAsE;QACtE,gEAAgE;QAChErB,MAAMN,CAAAA,wBAAAA,SAASY,MAAM,CAACN,IAAI,YAApBN,wBAAwBM;QAC9BM,QAAQR;QACRsB,UAAU,eACJA,mBAAAA,WAAY,CAAC,GACbD,oBAAoB;YAAEA;QAAiB;;QAI5BzB;IAAnB,OAAOE,YAAYF,CAAAA,wBAAAA,6BAAAA,oBAAAA,SAAUY,MAAM,qBAAhBZ,iBAAkB,CAAC,OAAO,YAA1BA,wBAA8B,CAAC,GAAG4B;AACvD;AAEO,SAAShC,iBAAiBiC,GAAwB;IACvD,MAAMC,OAAiB,EAAE;IAEzB,KAAK,MAAM,CAACC,KAAKC,MAAM,IAAIC,OAAOC,OAAO,CAACL,KAAM;QAC9C,IAAIM,MAAMC,OAAO,CAACJ,QAAQ;YACxBA,MAAMK,OAAO,CAAC,CAACC,OAASR,KAAKS,IAAI,CAAC,CAAC,EAAE,EAAER,IAAI,CAAC,EAAEO,KAAK,CAAC;QACtD,OAAO,IAAI,OAAON,UAAU,YAAYA,UAAU,MAAM;YACtDF,KAAKS,IAAI,CAAC,CAAC,EAAE,EAAER,IAAI,EAAE,EAAES,KAAKC,SAAS,CAACT,OAAO,CAAC,CAAC;QACjD,OAAO;YACLF,KAAKS,IAAI,CAAC,CAAC,EAAE,EAAER,IAAI,CAAC,EAAEC,MAAM,CAAC;QAC/B;IACF;IAEA,OAAOF;AACT"}