{"version":3,"sources":["../../../../../../../packages/vite/src/migrations/update-17-3-0/lib/fix-coverage-and-reporters.ts"],"sourcesContent":["import { ChangeType, applyChangesToString } from '@nx/devkit';\nimport { tsquery } from '@phenomnomnominal/tsquery';\nimport ts = require('typescript');\n\nexport function fixCoverageAndRerporters(\n  configContents: string\n): string | undefined {\n  const configNode = getConfigNode(configContents);\n  if (!configNode) {\n    return;\n  }\n\n  const testHasCoverage = tsquery.query(\n    configNode,\n    `PropertyAssignment:has(Identifier[name=\"test\"]):has(PropertyAssignment:has(Identifier[name=\"coverage\"]))`\n  )?.[0];\n  let changes = [];\n\n  if (testHasCoverage) {\n    const testObjectLiteralExpressionNode = tsquery.query(\n      testHasCoverage,\n      `ObjectLiteralExpression:has(Identifier[name=\"coverage\"])`\n    )?.[0];\n    const coverageNode = findCoverageNode(testObjectLiteralExpressionNode);\n\n    if (!coverageNode) {\n      return;\n    }\n\n    const linesNode = tsquery.query(\n      coverageNode,\n      `PropertyAssignment:has(Identifier[name=\"lines\"])`\n    )?.[0];\n\n    const statementsNode = tsquery.query(\n      coverageNode,\n      `PropertyAssignment:has(Identifier[name=\"statements\"])`\n    )?.[0];\n\n    const functionsNode = tsquery.query(\n      coverageNode,\n      `PropertyAssignment:has(Identifier[name=\"functions\"])`\n    )?.[0];\n\n    const branchesNode = tsquery.query(\n      coverageNode,\n      `PropertyAssignment:has(Identifier[name=\"branches\"])`\n    )?.[0];\n\n    if (linesNode) {\n      changes.push({\n        type: ChangeType.Delete,\n        start: linesNode.getStart(),\n        length: linesNode.getWidth() + 1,\n      });\n    }\n    if (statementsNode) {\n      changes.push({\n        type: ChangeType.Delete,\n        start: statementsNode.getStart(),\n        length: statementsNode.getWidth() + 1,\n      });\n    }\n\n    if (functionsNode) {\n      changes.push({\n        type: ChangeType.Delete,\n        start: functionsNode.getStart(),\n        length: functionsNode.getWidth() + 1,\n      });\n    }\n\n    if (branchesNode) {\n      changes.push({\n        type: ChangeType.Delete,\n        start: branchesNode.getStart(),\n        length: branchesNode.getWidth() + 1,\n      });\n    }\n\n    if (branchesNode || functionsNode || statementsNode || linesNode) {\n      changes.push({\n        type: ChangeType.Insert,\n        index: coverageNode.getStart() + 1,\n        text: `thresholds: {\n        ${linesNode ? linesNode.getText() + ',' : ''}\n        ${statementsNode ? statementsNode.getText() + ',' : ''}\n        ${functionsNode ? functionsNode.getText() + ',' : ''}\n        ${branchesNode ? branchesNode.getText() + ',' : ''}\n      },`,\n      });\n    }\n  }\n\n  const testHasReporters = tsquery.query(\n    configNode,\n    `PropertyAssignment:has(Identifier[name=\"test\"]):has(PropertyAssignment:has(Identifier[name=\"reporters\"]))`\n  )?.[0];\n\n  if (!testHasReporters) {\n    const testObject = tsquery.query(\n      configNode,\n      `PropertyAssignment:has(Identifier[name=\"test\"])`\n    )?.[0];\n\n    if (testObject) {\n      changes.push({\n        type: ChangeType.Insert,\n        index: testObject.getStart() + `test: {`.length + 1,\n        text: `reporters: ['default'],`,\n      });\n    }\n  }\n\n  if (changes.length > 0) {\n    return applyChangesToString(configContents, changes);\n  } else {\n    return;\n  }\n}\n\nexport function getConfigNode(configFileContents: string): ts.Node | undefined {\n  if (!configFileContents) {\n    return;\n  }\n  let configNode = tsquery.query(\n    configFileContents,\n    `ObjectLiteralExpression`\n  )?.[0];\n\n  const arrowFunctionReturnStatement = tsquery.query(\n    configFileContents,\n    `ArrowFunction Block ReturnStatement ObjectLiteralExpression`\n  )?.[0];\n\n  if (arrowFunctionReturnStatement) {\n    configNode = arrowFunctionReturnStatement;\n  }\n\n  return configNode;\n}\n\nfunction findCoverageNode(testNode: ts.Node) {\n  let coverageNode: ts.Node | undefined;\n  testNode.forEachChild((child) => {\n    if (ts.isPropertyAssignment(child) && child.name.getText() === 'coverage') {\n      coverageNode = child.initializer;\n    }\n  });\n  return coverageNode;\n}\n"],"names":["fixCoverageAndRerporters","getConfigNode","ts","configContents","tsquery","configNode","testHasCoverage","query","changes","testObjectLiteralExpressionNode","coverageNode","findCoverageNode","linesNode","statementsNode","functionsNode","branchesNode","push","type","ChangeType","Delete","start","getStart","length","getWidth","Insert","index","text","getText","testHasReporters","testObject","applyChangesToString","configFileContents","arrowFunctionReturnStatement","testNode","forEachChild","child","isPropertyAssignment","name","initializer"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}