{"version":3,"sources":["../../../../../../../packages/vite/src/migrations/update-17-2-0/lib/edit-test-config.ts"],"sourcesContent":["import {\n  ChangeType,\n  ProjectConfiguration,\n  applyChangesToString,\n  joinPathFragments,\n  offsetFromRoot,\n} from '@nx/devkit';\nimport { tsquery } from '@phenomnomnominal/tsquery';\nimport ts = require('typescript');\nimport { getConfigNode, notFoundWarning } from '../update-vite-config';\n\nexport function updateTestConfig(\n  configContents: string,\n  projectConfig: ProjectConfiguration,\n  configPath: string\n): string {\n  const configNode = getConfigNode(configContents);\n  if (!configNode) {\n    notFoundWarning(configPath);\n    return configContents;\n  }\n\n  const testObject = tsquery.query(\n    configNode,\n    `PropertyAssignment:has(Identifier[name=\"test\"])`\n  )?.[0];\n  let testCoverageDir: ts.Node;\n  let testCoverage: ts.Node;\n  let provider: ts.Node;\n  let reporters: ts.Node;\n\n  if (testObject) {\n    testCoverage = tsquery.query(\n      testObject,\n      `PropertyAssignment:has(Identifier[name=\"coverage\"])`\n    )?.[0];\n    reporters = tsquery.query(\n      testObject,\n      `PropertyAssignment:has(Identifier[name=\"reporters\"])`\n    )?.[0];\n    if (testCoverage) {\n      testCoverageDir = tsquery.query(\n        testCoverage,\n        `PropertyAssignment:has(Identifier[name=\"reportsDirectory\"])`\n      )?.[0];\n      provider = tsquery.query(\n        testCoverage,\n        `PropertyAssignment:has(Identifier[name=\"provider\"])`\n      )?.[0];\n    }\n  }\n\n  let coverageDir = '';\n\n  if (projectConfig.targets?.test?.options?.reportsDirectory) {\n    coverageDir = projectConfig.targets?.test?.options?.reportsDirectory;\n  } else {\n    coverageDir = joinPathFragments(\n      offsetFromRoot(projectConfig.root),\n      'coverage',\n      projectConfig.root\n    );\n  }\n\n  let changes = [];\n\n  if (!reporters && testObject) {\n    changes.push({\n      type: ChangeType.Insert,\n      index: testObject.getStart() + `test: {`.length + 1,\n      text: `reporters: ['default'],`,\n    });\n  }\n\n  if (testCoverageDir) {\n    // Do nothing\n  } else if (testCoverage) {\n    // has test.coverage, has no reportsDirectory\n    // so add reportsDirectory\n    changes.push({\n      type: ChangeType.Insert,\n      index: testCoverage.getStart() + `coverage: {`.length + 1,\n      text: `reportsDirectory: '${coverageDir}',`,\n    });\n    if (!provider) {\n      changes.push({\n        type: ChangeType.Insert,\n        index: testCoverage.getStart() + `coverage: {`.length + 1,\n        text: `provider: 'v8' as const,`,\n      });\n    }\n  } else if (testObject) {\n    changes.push({\n      type: ChangeType.Insert,\n      index: testObject.getStart() + `test: {`.length + 1,\n      text: `coverage: {\n          reportsDirectory: '${coverageDir}',\n          provider: 'v8' as const,\n        },`,\n    });\n  }\n\n  if (changes.length > 0) {\n    return applyChangesToString(configContents, changes);\n  } else {\n    return configContents;\n  }\n}\n"],"names":["updateTestConfig","configContents","projectConfig","configPath","tsquery","configNode","getConfigNode","notFoundWarning","testObject","query","testCoverageDir","testCoverage","provider","reporters","coverageDir","targets","test","options","reportsDirectory","joinPathFragments","offsetFromRoot","root","changes","push","type","ChangeType","Insert","index","getStart","length","text","applyChangesToString"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}