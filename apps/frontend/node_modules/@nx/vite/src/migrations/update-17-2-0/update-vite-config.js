"use strict";
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return updateBuildDir;
    },
    getConfigNode: function() {
        return getConfigNode;
    },
    notFoundWarning: function() {
        return notFoundWarning;
    }
});
const _devkit = require("@nx/devkit");
const _executoroptionsutils = require("@nx/devkit/src/generators/executor-options-utils");
const _editbuildconfig = require("./lib/edit-build-config");
const _edittestconfig = require("./lib/edit-test-config");
const _addfilereplacements = require("./lib/add-file-replacements");
const _tsquery = require("@phenomnomnominal/tsquery");
const _findviteconfig = require("../../utils/find-vite-config");
async function updateBuildDir(tree) {
    const projects = (0, _devkit.getProjects)(tree);
    (0, _executoroptionsutils.forEachExecutorOptions)(tree, '@nx/vite:build', (options, projectName, targetName)=>{
        var _options_fileReplacements;
        const projectConfig = projects.get(projectName);
        const config = options.configFile || (0, _findviteconfig.findViteConfig)(tree, projectConfig.root);
        if (!config || !tree.exists(config)) {
            return;
        }
        let configContents = tree.read(config, 'utf-8');
        configContents = (0, _editbuildconfig.updateBuildOutDirAndRoot)(options, configContents, projectConfig, targetName, tree, projectName, config);
        configContents = (0, _edittestconfig.updateTestConfig)(configContents, projectConfig, config);
        if (((_options_fileReplacements = options['fileReplacements']) == null ? void 0 : _options_fileReplacements.length) > 0) {
            configContents = (0, _addfilereplacements.addFileReplacements)(configContents, options['fileReplacements'], config);
        }
        tree.write(config, configContents);
    });
    await (0, _devkit.formatFiles)(tree);
}
function getConfigNode(configFileContents) {
    var _tsquery_query;
    if (!configFileContents) {
        return;
    }
    let configNode = (_tsquery_query = _tsquery.tsquery.query(configFileContents, `CallExpression:has(Identifier[name=defineConfig]) > ObjectLiteralExpression`)) == null ? void 0 : _tsquery_query[0];
    if (!configNode) {
        var _tsquery_query1;
        const arrowFunctionReturnStatement = (_tsquery_query1 = _tsquery.tsquery.query(configFileContents, `ArrowFunction Block ReturnStatement ObjectLiteralExpression`)) == null ? void 0 : _tsquery_query1[0];
        if (arrowFunctionReturnStatement) {
            configNode = arrowFunctionReturnStatement;
        }
    }
    return configNode;
}
function notFoundWarning(configPath) {
    _devkit.logger.warn(`
  Could not migrate your ${configPath} file.
  Please add the build.outDir and root options in your ${configPath} file.
  You can find more information on how to configure vite for Nx here:
  
  https://nx.dev/recipes/vite/configure-vite
  `);
}

//# sourceMappingURL=update-vite-config.js.map