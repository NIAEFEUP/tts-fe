"use strict";
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _devkit = require("@nx/devkit");
const _ignorevitetempfiles = require("../../utils/ignore-vite-temp-files");
const _versions = require("../../utils/versions");
async function _default(tree) {
    if (!(0, _ignorevitetempfiles.isEslintInstalled)(tree)) {
        return;
    }
    (0, _devkit.ensurePackage)('@nx/eslint', _versions.nxVersion);
    const { addIgnoresToLintConfig, isEslintConfigSupported } = await Promise.resolve().then(()=>require("@nx/eslint/src/generators/utils/eslint-file"));
    if (!isEslintConfigSupported(tree)) {
        return;
    }
    const { useFlatConfig } = await Promise.resolve().then(()=>require("@nx/eslint/src/utils/flat-config"));
    const isUsingFlatConfig = useFlatConfig(tree);
    if (isUsingFlatConfig) {
        // using flat config, so we update the root eslint config
        addIgnoresToLintConfig(tree, '', [
            '**/vite.config.*.timestamp*',
            '**/vitest.config.*.timestamp*'
        ]);
    } else {
        // not using flat config, so we update each project's eslint config
        const projects = (0, _devkit.getProjects)(tree);
        for (const [, { root: projectRoot }] of projects){
            const viteConfigFiles = await (0, _devkit.globAsync)(tree, [
                `${projectRoot}/**/{vite,vitest}.config.{js,ts,mjs,mts,cjs,cts}`
            ]);
            if (!viteConfigFiles.length) {
                continue;
            }
            addIgnoresToLintConfig(tree, projectRoot, [
                '**/vite.config.*.timestamp*',
                '**/vitest.config.*.timestamp*'
            ]);
        }
    }
    await (0, _devkit.formatFiles)(tree);
}

//# sourceMappingURL=eslint-ignore-vite-temp-files.js.map