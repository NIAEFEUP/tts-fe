{"version":3,"sources":["../../../../packages/vite/plugins/rollup-replace-files.plugin.ts"],"sourcesContent":["// source: https://github.com/Myrmod/vitejs-theming/blob/master/build-plugins/rollup/replace-files.js\n\n/**\n * @function replaceFiles\n * @param {FileReplacement[]} replacements\n * @return {({name: \"rollup-plugin-replace-files\", enforce: \"pre\" | \"post\" | undefined, Promise<resolveId>})}\n */\nexport function replaceFiles(replacements: FileReplacement[]): {\n  name: string;\n  enforce: 'pre' | 'post' | undefined;\n  resolveId(\n    source: any,\n    importer: any,\n    options: any\n  ): Promise<{\n    id: string;\n  }>;\n} {\n  if (!replacements?.length) {\n    return null;\n  }\n  return {\n    name: 'rollup-plugin-replace-files',\n    enforce: 'pre',\n    async resolveId(source, importer, options) {\n      const resolved = await this.resolve(source, importer, {\n        ...options,\n        skipSelf: true,\n      });\n      /**\n       * The reason we're using endsWith here is because the resolved id\n       * will be the absolute path to the file. We want to check if the\n       * file ends with the file we're trying to replace, which will be essentially\n       * the path from the root of our workspace.\n       */\n\n      const foundReplace = replacements.find((replacement) =>\n        resolved?.id?.endsWith(replacement.replace)\n      );\n      if (foundReplace) {\n        console.info(\n          `replace \"${foundReplace.replace}\" with \"${foundReplace.with}\"`\n        );\n        try {\n          // return new file content\n          return {\n            id: foundReplace.with,\n          };\n        } catch (err) {\n          console.error(err);\n          return null;\n        }\n      }\n      return null;\n    },\n  };\n}\n\nexport interface FileReplacement {\n  replace: string;\n  with: string;\n}\n"],"names":["replaceFiles","replacements","length","name","enforce","resolveId","source","importer","options","resolved","resolve","skipSelf","foundReplace","find","replacement","id","endsWith","replace","console","info","with","err","error"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA,qGAAqG;AAErG;;;;CAIC;+BACeA;;;eAAAA;;;;AAAT,SAASA,aAAaC,YAA+B;IAW1D,IAAI,EAACA,gCAAAA,aAAcC,MAAM,GAAE;QACzB,OAAO;IACT;IACA,OAAO;QACLC,MAAM;QACNC,SAAS;QACT,MAAMC,WAAUC,MAAM,EAAEC,QAAQ,EAAEC,OAAO;YACvC,MAAMC,WAAW,MAAM,IAAI,CAACC,OAAO,CAACJ,QAAQC,UAAU,eACjDC;gBACHG,UAAU;;YAEZ;;;;;OAKC,GAED,MAAMC,eAAeX,aAAaY,IAAI,CAAC,CAACC;oBACtCL;uBAAAA,6BAAAA,eAAAA,SAAUM,EAAE,qBAAZN,aAAcO,QAAQ,CAACF,YAAYG,OAAO;;YAE5C,IAAIL,cAAc;gBAChBM,QAAQC,IAAI,CACV,CAAC,SAAS,EAAEP,aAAaK,OAAO,CAAC,QAAQ,EAAEL,aAAaQ,IAAI,CAAC,CAAC,CAAC;gBAEjE,IAAI;oBACF,0BAA0B;oBAC1B,OAAO;wBACLL,IAAIH,aAAaQ,IAAI;oBACvB;gBACF,EAAE,OAAOC,KAAK;oBACZH,QAAQI,KAAK,CAACD;oBACd,OAAO;gBACT;YACF;YACA,OAAO;QACT;IACF;AACF"}