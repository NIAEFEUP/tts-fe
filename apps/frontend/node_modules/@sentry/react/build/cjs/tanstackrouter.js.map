{"version":3,"file":"tanstackrouter.js","sources":["../../src/tanstackrouter.ts"],"sourcesContent":["import {\n  WINDOW,\n  browserTracingIntegration as originalBrowserTracingIntegration,\n  startBrowserTracingNavigationSpan,\n  startBrowserTracingPageLoadSpan,\n} from '@sentry/browser';\nimport type { Integration } from '@sentry/core';\nimport {\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n} from '@sentry/core';\nimport type { VendoredTanstackRouter, VendoredTanstackRouterRouteMatch } from './vendor/tanstackrouter-types';\n\n/**\n * A custom browser tracing integration for TanStack Router.\n *\n * The minimum compatible version of `@tanstack/router` is `1.34.5`.\n *\n * @param router A TanStack Router `Router` instance that should be used for routing instrumentation.\n * @param options Sentry browser tracing configuration.\n */\nexport function tanstackRouterBrowserTracingIntegration(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  router: any, // This is `any` because we don't want any type mismatches if TanStack Router changes their types\n  options: Parameters<typeof originalBrowserTracingIntegration>[0] = {},\n): Integration {\n  const castRouterInstance: VendoredTanstackRouter = router;\n\n  const browserTracingIntegrationInstance = originalBrowserTracingIntegration({\n    ...options,\n    instrumentNavigation: false,\n    instrumentPageLoad: false,\n  });\n\n  const { instrumentPageLoad = true, instrumentNavigation = true } = options;\n\n  return {\n    ...browserTracingIntegrationInstance,\n    afterAllSetup(client) {\n      browserTracingIntegrationInstance.afterAllSetup(client);\n\n      const initialWindowLocation = WINDOW.location;\n      if (instrumentPageLoad && initialWindowLocation) {\n        const matchedRoutes = castRouterInstance.matchRoutes(\n          initialWindowLocation.pathname,\n          castRouterInstance.options.parseSearch(initialWindowLocation.search),\n          { preload: false, throwOnError: false },\n        );\n\n        const lastMatch = matchedRoutes[matchedRoutes.length - 1];\n\n        startBrowserTracingPageLoadSpan(client, {\n          name: lastMatch ? lastMatch.routeId : initialWindowLocation.pathname,\n          attributes: {\n            [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'pageload',\n            [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.pageload.react.tanstack_router',\n            [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: lastMatch ? 'route' : 'url',\n            ...routeMatchToParamSpanAttributes(lastMatch),\n          },\n        });\n      }\n\n      if (instrumentNavigation) {\n        // The onBeforeNavigate hook is called at the very beginning of a navigation and is only called once per navigation, even when the user is redirected\n        castRouterInstance.subscribe('onBeforeNavigate', onBeforeNavigateArgs => {\n          const fromLocationState = onBeforeNavigateArgs.fromLocation && onBeforeNavigateArgs.fromLocation.state;\n          // onBeforeNavigate is called during pageloads. We can avoid creating navigation spans by comparing the states of the to and from arguments.\n          if (onBeforeNavigateArgs.toLocation.state === fromLocationState) {\n            return;\n          }\n\n          const onResolvedMatchedRoutes = castRouterInstance.matchRoutes(\n            onBeforeNavigateArgs.toLocation.pathname,\n            onBeforeNavigateArgs.toLocation.search,\n            { preload: false, throwOnError: false },\n          );\n\n          const onBeforeNavigateLastMatch = onResolvedMatchedRoutes[onResolvedMatchedRoutes.length - 1];\n\n          const navigationLocation = WINDOW.location;\n          const navigationSpan = startBrowserTracingNavigationSpan(client, {\n            name: onBeforeNavigateLastMatch ? onBeforeNavigateLastMatch.routeId : navigationLocation.pathname,\n            attributes: {\n              [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'navigation',\n              [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.navigation.react.tanstack_router',\n              [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: onBeforeNavigateLastMatch ? 'route' : 'url',\n            },\n          });\n\n          // In case the user is redirected during navigation we want to update the span with the right value.\n          const unsubscribeOnResolved = castRouterInstance.subscribe('onResolved', onResolvedArgs => {\n            unsubscribeOnResolved();\n            if (navigationSpan) {\n              const onResolvedMatchedRoutes = castRouterInstance.matchRoutes(\n                onResolvedArgs.toLocation.pathname,\n                onResolvedArgs.toLocation.search,\n                { preload: false, throwOnError: false },\n              );\n\n              const onResolvedLastMatch = onResolvedMatchedRoutes[onResolvedMatchedRoutes.length - 1];\n\n              if (onResolvedLastMatch) {\n                navigationSpan.updateName(onResolvedLastMatch.routeId);\n                navigationSpan.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'route');\n                navigationSpan.setAttributes(routeMatchToParamSpanAttributes(onResolvedLastMatch));\n              }\n            }\n          });\n        });\n      }\n    },\n  };\n}\n\nfunction routeMatchToParamSpanAttributes(match: VendoredTanstackRouterRouteMatch | undefined): Record<string, string> {\n  if (!match) {\n    return {};\n  }\n\n  const paramAttributes: Record<string, string> = {};\n  Object.entries(match.params).forEach(([key, value]) => {\n    paramAttributes[`url.path.params.${key}`] = value;\n  });\n\n  return paramAttributes;\n}\n"],"names":["originalBrowserTracingIntegration","WINDOW","startBrowserTracingPageLoadSpan","SEMANTIC_ATTRIBUTE_SENTRY_OP","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","startBrowserTracingNavigationSpan"],"mappings":"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"}