name: Sentry Release

on:
  push:
    branches:
      - main
      - develop

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: yarn install

      - name: Build project
        run: yarn build

      - name: Determine release version
        id: get_version
        run: |
          VERSION=$(jq -r .version < package.json)

          # If the branch is develop, use the commit hash as the version
          if [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            VERSION=$(git rev-parse --short HEAD)
          fi

          echo "Version to be released: $VERSION"
          echo "::set-output name=release_version::$VERSION"

      - name: Install Sentry CLI
        run: npm install -g @sentry/cli

      - name: Create Sentry release
        env:
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          sentry-cli releases new ${{ steps.get_version.outputs.release_version }}
          sentry-cli releases set-commits --auto ${{ steps.get_version.outputs.release_version }}

      - name: Upload source maps to Sentry
        env:
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          sentry-cli releases files ${{ steps.get_version.outputs.release_version }} upload-sourcemaps ./build

      - name: Finalize Sentry release
        env:
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: sentry-cli releases finalize ${{ steps.get_version.outputs.release_version }}
